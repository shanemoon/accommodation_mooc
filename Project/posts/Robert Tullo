Sunday September 8th 2013 1:29 am -04:00,As Jen and Paul mentioned in one of the videos and as they talked about the visualizer the computer has to figure out what everything in a line of code means (operands variables parameters etc) to put them in the right place.  One thing that is kind of typical is the way many programming environments interpret (AKA parse) lines of code.  Parsing is a fancy term for breaking down the code to execute it and typically works going from left to right on the line.  I bring that up since it will come up in some peoples explanations.Without getting too complicated it expects certain things to happen like open quotes have closing quotes and open parentheses have closed ones IN THE SAME LINE THAT THEY STARTED otherwise it will generally throw a Syntax Error.  Python expects a line of code to be complete at the end of the line where the return is (unless you do something fancy I wont delve into here).  If it isnt complete it keeps looking and goes to the next line.So if you keep staring at a line of code and cant figure out what is wrong with it because the error doesnt make sense check the previous line of code.  Chances are that is the one with the error and it is missing a parenthesis has mismatched quote types or unbalanced quotes., Resolved,0
Sunday September 8th 2013 1:42 am -04:00,The feedback should be on the assignment submission page (Assignments on the Class Navigation bar on the left).When you submit a dialog comes up and says Code Submission and you should add file (browse to your a1.py) and click submit.  You only need the one file.Prior to your first submission it used to have Assignment 1 --/41 View (button) Submit (button) you should see a score where it used to have a --.You can click on View to get a summary.  If you didnt get all of the points you can click on detail and it will tell you which test cases failed/passed.  If you failed a test case click on failure and you will see the error message generated.When you submit it goes to a page that says something like your results should be available shortlyYour results for this short program are immediately available., Unresolved,0
Monday September 9th 2013 11:51 am -04:00,One thing to keep in mind that if a condition earlier in the if/elif clause is a combined expression (uses and or or clauses) and it evaluates to false the rest of the clause doesnt make any assumptions about the values of each of the variables.  In particular if a condition check fails because not all parts evaluate to true you shouldnt assume which parts are true.  You have to check them independently to be sure.for example in the code below a could be true or false b could be true or false and there is no way to know which variable has what value without checking specifically.if a and b:    print (a and b are both true)elif a:    print (a alone must be true since the previous if checked to see if both were true)elif b:    print (b alone must be true since the previous if and the previous elif failed)else:    print (neither a or b are true)the if part gets executed only if both are true.The first elif gets executed only if both a and b are not truea is trueThe second elif gets executed only if both a and b are not trueb is trueThe else only gets executed if both a and b are false otherwise if either or both of them were true one of the other print statements must have been executed.However if you check a single variable (if money <=.99 in the example) and use nested if statements you dont need to recheck that variable for the rest of the nested parts.  Hence the comment in the explanation that both if/elif constructs are good but one has redundant code. , Unresolved,1
Monday September 9th 2013 12:00 pm -04:00,Just an FYI the explanation for the answer in the last quiz is cut off., Unresolved,1
Monday September 9th 2013 2:29 pm -04:00,The post was mainly to flag the omission to the staff.  My reasoning isnt going to be as succinct as theirs but :)The main code first checks to see if the temperature is warm enough out to warrant a drink (temp > 28)if and only if it is it then checks how much money you have.  Money can only be either > 99 cents or <= 99 cents. If you have more than 99 cents you get a lemonade otherwise you go find the fountain. As written if the temperature is <=28 NOTHING WOULD HAPPEN since you fail the first if statement and skip the whole rest of the code block with the print statements.  This is key for the third answer.the first answer choice is correct because the first if clause checks a combination condition (the temperature >28  and your wallet contents are more then 99 cents)if you have BOTH a high temperature and enough money you go get a lemonade.  The elif condition checks the temperature and your wallet contents again and see if you have less than or equal to 99 cents.  But the second comparison in the elif is redundant. You already checked for the temp and money > 99 cents.  So since you know you dont have more than 99 cents (you failed the first condition in the if otherwise you would have printed to get the lemonade) you MUST have <= 99 cents.  Hence just print where is the water fountain if the temperature is > 28. the second answer choice is correct for the reason I just mentioned (dont need to check the value of money twice).  We only care to do something if the temp > 28.  If it is AND you have more than 99 cents just as above we check money and print I am buying a lemonade.  The else then checks temp > 28 again.  If the temp is > 28 then as mentioned just above you must have <= 99 cents hence just print where is the water fountainThe third one is incorrect because it could print where is the water fountain even if the temperature is <= 28.  That is not the same behavior as the original code since nothing happens in the original code if the temperature <= 28., Unresolved,1
Sunday September 15th 2013 10:17 pm -04:00,recall how count works.  It looks for the number of times a substring appears in the main string.Your main string is str == ATTGCC.  Your substring is A + T + C + G == ATCG since Python will concatenate your pieces as think that is the substring.  So it wont find ATCG in ATTGCC so it returns zero.according to the lecture and the Python help:S.count(sub[ start[ end]]) -> intrecall when Jen and Paul stated when looking at functions anything in open and closed brackets [ and ] are optional. So lets ignore the start end part for now.S.count(sub) returns an intthis function will return the number of times the substring (sub) shows up in the main string (S)The function you need to write for the assignment takes in a nucleotide (single letter) as one of the parameters.  That is the substring you should use in your count.The whole point of the start end (not really needed for our implementation) is to tell Python where in the string to start before looking for the substring and when to end (see the white rabbit example), Unresolved,0
Monday September 16th 2013 12:03 am -04:00,You generally cant compare a string (xyz) to a number (0) and have it reliably do the comparison.I am assuming xyz is a string based on your context.You can compare strings to strings and numbers to numbers.However as a hint you can compare the length of a string to a number and based on the comparison of the length to the number you can do something (return the slices put together like you showed).Also recall the video on no if required.  If you can only have two possibilities and you rule out one by the first if you dont really need a second if since it MUST be true.  You can just execute the statement in the body of the second if.  There is nothing wrong with the two ifs but the extra code is redundant., Pinned Approved Unresolved,0
Monday September 16th 2013 12:30 am -04:00,actually they covered it in lecture 4.1 string operators :)So I went that route, Resolved,0
Monday September 16th 2013 12:14 am -04:00,EPs explanation aside keep in mind that when writing programs and test cases are given the expectation is that anything else using the code knows what will come out based on an input.   That is the fundamental concept of documenting the logic and the type contracts.  I have seen a lot of software written where I would have perhaps handled a condition differently but what can you do?The instructors could have stated that an empty string is invalid input or that an empty string returns False.  In this case they chose neither of these options and decided the function would return True.  One could argue it makes the logic for the function easier (fewer conditions to check) and that is why they went that route., Unresolved,0

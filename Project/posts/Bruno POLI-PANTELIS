Sunday August 25th 2013 9:15 am -04:00,Hi folks. Heres my (non recursive) attempt.  def Fib_list(n):	L = list()	L.append(0)	if n > 1:		L.append(1)		a = 0		b = 1		c = 3		while c <= n:			a += b			L.append(a)			xor = a ^ b #			a ^= xor    # poor mans SWAP			b ^= xor    #			c += 1	print(Finished calculations)	print(L),None,-1
Sunday August 25th 2013 6:30 pm -04:00,Ah thanks! Convenient and definitely more elegant. Perlish.,None,-1
Thursday August 29th 2013 1:03 pm -04:00,Nice of you to have gone to the trouble of benchmarking the code.I wasnt aware that Python permitted list assignments and now we know thats it convenient and efficient!,None,-1
Thursday August 29th 2013 2:46 pm -04:00,Yes the XOR method is slower as indicated by the user/sys times in Etiennes benchmark tests (and confirmed by time.clock benchmarking on my own machine as well).He probably meant that list assignments are the poorest mans swap in that time is money and the poorest man can only afford the fastest code. Or something...,None,0
Sunday August 25th 2013 9:39 am -04:00,HelloThanks for this exercise.Heres my suggestion :def Roots(numberroot): return number ** (1 / root)def Power(number exponent): return number ** exponentI had to cheat for the root part i.e. finding the equivalent between x Root(number) and number Exp(1/x),None,-1
Tuesday August 27th 2013 4:28 pm -04:00,Hello!Heres my suggestion :def Combinations(nbr_letters):	combinations = 	# list of combinations (type string)	codes = 		# list of letter ASCII codes for current combination		# initialise combination	for i in range(0 nbr_letters): codes.append(65)		last = nbr_letters - 1	# index of last letter in combination		while True:				# convert numeric combination to string representation		combination = 		for i in codes: combination += chr(i)				# store string representation of current combination		combinations.append(combination)				# if last letter is Z (ASCII 90)		if codes[last] == 90:						# set to A			codes[last] = 65						# initialise index of previous letter			i = last - 1						# while index of previous letter is valid			while i >= 0:								# if previous letter is Z				if codes[i] == 90:										# set to A					codes[i] = 65										# move one letter backward (and re-enter loop)					i -= 1				else:										# increment letter					codes[i] += 1										# exit from loop					break						# this part is executed when the while condition evaluates to false (*not* through a break statement). Practically it means that the following code will be executed when all letters are Z			else:				# exit from main loop (refers to while True)				break				# if last letter isnt Z		else:			# increment letter			codes[last] += 1		print((All combinations found))	for combination in combinations: print(combination)Sorry if its neither elegant nor simple.And thanks for posting a challenge!,None,-1
Tuesday August 27th 2013 10:03 am -04:00,Hello! Heres my suggestion:def Alpha_shift(sentence shift):	(stringint) -> string	return a string where letters have been shifted <shift> rows to the left of to the right. A positive <shift> value will shift letters to the right ; negative to the left.	Example :	Alpha_shift(this is a test 2)			vjku ku c vguv	# initialise result string	shifted_sentence = 		# ensure <shift> stays within a range of [0..25]	shift %= 26	# variable <character> will iterate through each character in <sentence>	for character in sentence:				# if character is alphabetic		if character.isalpha():			# if lower case letter			if character.islower(): shifted_sentence += chr(97 + (ord(character) - 71 + shift) % 26)			# if upper case letter			else: shifted_sentence += chr(65 + (ord(character) - 39 + shift) % 26)				# otherwise append non-alphabetic characters without any processing		else: shifted_sentence += character		return shifted_sentence    # UPDATED TO INCLUDE isalpha() AND islower()Tocipher a string use :Alpha_shift(string numeric_shift)And to decipher :Alpha_shift(string - numeric_shift)Thanks for posting programming challenges!,None,-1
Wednesday August 28th 2013 1:42 pm -04:00,Hello DianeThank you for your comment.Concerning the character-set the function was intentionally coded to shift only alphabetic characters regardless of case preserving capitalisation punctuation and all non-alphabetic content.As to the greater than sign where in the code do you think it would be needed?,None,-1
Thursday August 29th 2013 4:43 am -04:00,Of course theres more than one way to approach a problem and nobodys claiming to hold the ultimate solution. Besides being a total beginner in Python I think code optimisation concerns should come at a later time when were better acquainted with Pythons idioms. But its only my approach.,None,-1
Thursday August 29th 2013 7:19 am -04:00,Hello DianeA few remarks on your code.Your code refers to shift as a global variable in function find_let but you commented out its declaration which results in a compile (or whatever the name of that stage) error. Besides If you want shift to be a global variable you neednt pass it as an argument to translate().Another issue is that when shift is assigned user input in caesar() it really is a local variable (no global declaration there) and (global) variable shift in function find_let() doesnt refer to the same variable. Addingdef caesar():    global shiftwill fix this.Global variable caes is initialised to a list containing an empty string as its first element. The following would do just fine :caes = With caes being defined as global it means that function translate() appends characters to global variable caes then returns it which is in turn assigned to local variable caes in function caesar().alph is used in your code to test if a character is lower case alphabetic to return its numeric index or to return the letter corresponding to a numeric index. Now that youre more familiar with ASCII codes you could use the ord() function to get letter codes chr() to get letter from code and Pythons built-in string method isalpha() (as illustrated by Lakkas post below) to test if characters belong to the alphabet.Furthermore you define variables c and d as global and initialise them to an empty string. C is used in translate() and d in find_let() but nowhere in those functions are they declared as global so it means that global variables c and d are practically never used.Finally concerning your find_let() function if you wish to make your code shorter you can notice that you d = alph[t] assignment occurs in both parts of your conditional test. You can safely move this assignment outside of it like this :def find_let(b):    global shift t ceas    if b + shift >= 26:        t = int((b + shift) % 26)    else:        t = int(b + shift)    d = alph[t]    return dHeres an update suggestion for your code (tested in IDLE).,None,0
Friday August 30th 2013 11:08 am -04:00,Looks definitely Pythonic (Pythonish?) ... and somewhat mysterious too. Good going!,None,0
Friday August 30th 2013 6:15 pm -04:00,It was poor wording on my part sorry. I just meant that the zip() seemed exotic to the beginner that I am. Taking a closer look at it now it looks like a multiple list iteration tool.,None,-1
Thursday August 29th 2013 5:07 am -04:00,Hello LakkaMay I contribute?Your code first converts the sentence to lower case but later on tests whether letters are lower case or not. Perhaps you could change for letter in sentence.lower() to for letter in sentence and rely on the if letter.islower() conditional statement.By the way its islower() (without parentheses it seemingly evaluates to method address).Its very convenient that Python has built-in string methods such as isalpha and islower!,None,-1
Friday August 30th 2013 10:56 am -04:00,welcome :-),None,-1
Friday August 30th 2013 11:50 am -04:00,Like this?def XOR_sentence(sentence encoding):        (str str) -> str        Perform a binary XOR on all characters of <sentence>        with those of <encoding> string. If <encoding> string is shorter than        <sentence> its characters are cyclically repeated        to match <sentence> length.        The quick brown fox jumps over the lazy dog!   <<< source string        a cipher testa cipher testa cipher testa cip   <<< encoding string        Example :        XOR_sentence(The quick brown fox jumps over the lazy doga cipher test)        >>> 5H\x06I\x01\x1d\x0c\x11KT\x07\x01\x1b\x16NC\x0f\x1f\x10E\x18U\x19\x15\x00T\x0eV\x06\x1bP\x1c\r\x17\x00\x18\x04\rAD\x0c\x0e        XOR_sentence(5H\x06I\x01\x1d\x0c\x11KT\x07\x01\x1b\x16NC\x0f\x1f\x10E\x18U\x19\x15\x00T\x0eV\x06\x1bP\x1c\r\x17\x00\x18\x04\rAD\x0c\x0ea cipher test)        >>> The quick brown fox jumps over the lazy dog                return .join([chr(c) for c in [ord(sentence[i]) ^ ord(encoding[i % len(encoding)]) for i in range(len(sentence))]])                ,None,0
Friday August 30th 2013 2:30 pm -04:00,@LakkaYes youre right. Actually this code was written as a response to anonymous who said :>> Another last fence of a defense for the encrypted message (that is used even today) would>> be to xor the encrypted message letters with some method before returning from the>> encryption function.(see above)So this function is intended as a complement to another encryption function.,None,0
Friday August 30th 2013 8:27 pm -04:00,@ EtienneAgreed! Heres a another variation:def sym_string(sentence key):        (str str) -> str        Return a string consisting of each character of <sentence>        mirrored against the corresponding character of <key>.        Mirroring is defined as taking the symmetrical opposite of a character        within a character set.        a b c d e f g h i j k l m n o p q r s t u v w x y z   <<< char-set                      |       |       |          mirrored ----       |       --- input character          character           |                               ---- key = axis        Formula : mirrored = (len(charset) + key + (key - input)) % len(charset)        Note : the character-set can also be randomly shuffled. The sequence of random values that are generated is dependant on <key>        Example :        sym_string(The quick brown fox jumps over the lazy coderThis is a test)        >>> Thd H]R&l Sl(! ~w$ 9|c3k 9Mv ZN_ ua~- &}DV                The quick brown fox jumps over the lazy coder   <<< each character of this is mirrored        This is a testThis is a testThis is a testThi   <<< against each character of this                        import string        import random                # build a list of printable characters except whitespace        charset = [i for i in iter(string.ascii_letters + string.digits + string.punctuation)]        length_charset = len(charset)        # strip <key> of those characters not found in char-set        key = .join([key[i] if key[i] in charset else  for i in range(len(key))])        # randomise charset        random.seed(key)        for i in range(length_charset):                j = int(random.random() * length_charset)                charset[i] charset[j] = charset[j] charset[i]        return .join( [                        charset[                               (length_charset + 2 * charset.index(key[i % len(key)]) - charset.index(sentence[i])) % length_charset                               ]                               if sentence[i] in charset else sentence[i]                        for i in range(len(sentence))                        ]                      ),None,0
Thursday August 29th 2013 10:26 am -04:00,Hello! Here is my attempt :def trip_time():    # initialise <place> and <total_time>    place = place1    total_time = time_to_go(place)    # add time for next places to go    while place != place4:        place = next_place(place)        total_time += time_to_go(place)    return total_time    def round_trip():    total_time = trip_time()    return {:02d}:{:02d}:{:02d}.format(int(total_time // 60) int(total_time % 60) int((total_time * 60) % 60))Thanks for the exercise!,None,0
Friday August 30th 2013 6:24 pm -04:00,Thank you :-)As for the :02d I thought something like 6:5:3 would look somewhat wrong as a time string.,None,-1
Friday September 6th 2013 8:04 am -04:00,Believe it or not but we all know what frustration feels like especially with computer programming. Now the forums are there for people of varying degrees of experience to share their knowledge and help each other. Correct me if Im wrong but youve had no forum activity prior to starting this thread which means that you havent actually given anybody a chance to help you before you came up complaining of smugness and bad pedagogy.Feel free to ask as many questions as needed youll see that nobody wants you to feel like a foreigner.Also perhaps the anthropologist in you would agree that voicing your dismay in a less theatrical manner would certainly yield more constructive feedback., Unresolved Locked,1
Friday September 6th 2013 8:49 am -04:00,Nancy Ill be pleased to offer you and Joseph my help with any programming problem you may have if you ever bother asking it in a considerate way., Unresolved Locked,0
Tuesday September 3rd 2013 6:31 pm -04:00,Hi folks!Heres my attempt :def Collatz_sequence(n):        (int) -> sequence of integer        Given number <n> return the sequence of integers generated        by applying the Collatz formula.        Precondition : n is a positive integer        Example :        >>> Collatz_sequence(10)        [10 5 16 8 4 2 1]                sequence = [n]        while n != 1:                                n = n // 2 if n % 2 == 0 else 3 * n + 1                sequence.append(n)        return sequencedef Collatz_seq_length(n):        (int) -> int        Return the length of a Collatz sequence for a given number <n>        (without actually determining the sequence contents).        Example :        >>> Collatz_sequence(10)        7                        length = 1        while n != 1:                n = n // 2 if n % 2 == 0 else 3 * n + 1                length += 1        return lengthdef Collatz_biggest_sequence(n):        # brute force approach        (int) -> int        return the integer from range [2 .. <n>] which produces        the longest Collatz sequence. The brute-force approach consists        in calculating sequence length for every number of the input range.        Example :        >>> Collatz_biggest_sequence(1000)        871                winning_number = 2        max_length = 2                for i in range(2 n + 1):                length = Collatz_seq_length(i)                if length > max_length:                        max_length = length                        winning_number = i        return winning_numberdef Collatz_biggest_sequence2(n):        # Ive already done that approach        (int) -> int        return the integer from range [2 .. <n>] which produces        the longest Collatz sequence. This function keeps track of already        calculated sequence lengths. For instance if we already know that        number 3 produces an 8 member sequence to determine the length for        number 12 we only need apply the Collatz formula twice :        12 => 6        6 => 3        and add 2 to the already known sequence length for number 3.        Example :        >>> Collatz_biggest_sequence(1000)        871                        known = {1: 1}        max_length = 1        winning_number = 1        for i in range(2 n + 1):                n = i                length = 0                while not n in known:                        length += 1                        n = n // 2 if n % 2 == 0 else 3 * n + 1                known[i] = known[n] + length                        for i in known.keys():                if known[i] > max_length:                        max_length = known[i]                        winning_number = i        return winning_number# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---def Print_sequence(n):        # for task 1        seq = Collatz_sequence(n)        print(Collatz sequence for n is :)        print( .join([str(i) for i in seq]))        print((len(seq) elements) sep=)        def Print_longest_sequence(n):        # for task 2        i = Collatz_biggest_sequence2(n)        print(Of all numbers up to n number i produces the longest sequence.)        Print_sequence(i)                          Tasks #1 and #2 are handled by the last two routines.,None,3
Friday September 6th 2013 7:51 pm -04:00,Thanks for your comment Michael and Im glad if you found this code useful to get started on the second part. I am not very comfortable with recursion but yes you can calculate the length using recursion just like the code youve posted below its very good.Also dont let my lengthy code postings give you false impressions Im a beginner just like you only with some Perl background :-)I hope to see your solution to part #2 (even if you feel like copying someone else in the beginning youll take ownership of the code in the process of writing and you will perhaps find new ways --- try it!).,None,0
Thursday September 5th 2013 7:09 am -04:00,I agree the questions wording is quite confusing.IMO it would have made more sense formulated this way :which English expression is always true for all the caseswhen the boolean expression evaluates to True., Unresolved,1
Thursday September 5th 2013 8:58 am -04:00,The question is :Which English sentence is true exactly when the Boolean expression evaluates to True?When the boolean expression evaluates to True sentences B C and D may be true.Yes sentence B covers the other two possibilities and yes the boolean expression is what one would write to test if the student got at least one of his/her exams but my point is whether the question is clearly and unambiguously worded., Unresolved,-2
Friday September 6th 2013 10:07 am -04:00,Citing the IDLE help() function about and :The expression x and y first evaluates x; if x is false itsvalue is returned; otherwise y is evaluated and the resulting valueis returned.Note that neither and nor or restrict the value and type theyreturn to False and True but rather return the last evaluatedargument.cents is evaluated to True (non-zero) so it evaluates dollars and returns its value.But if you had written :cents = 0dollars = 53the expression cents and dollars would evaluate to 0 (as the first value equates to False)Hope that helps!, Resolved,3
Tuesday September 17th 2013 3:34 pm -04:00,Was not much inspired by prime numbers.Here is to test primality:def is_prime(number):    for n in range(2 int(number ** 0.5) + 1):        if number % n == 0:            print(found divisor n)            return False    else: return TrueAnd this to find a list of prime numbers:def prime_list(number):    primes =     limit = None    for n in range(2 number + 1):        limit = int(n ** 0.5)        for divisor in primes:            if n % divisor == 0: break            elif divisor > limit:                primes.append(n)                break        else: primes.append(n)    return primes,None,0
Wednesday September 11th 2013 6:22 pm -04:00,Shouldnt a variable that represents whether a non-nucleotide was found be initialised to False and set to True if a non-nucleotide character is found or am I just tired?, Resolved,0
Wednesday September 11th 2013 8:02 pm -04:00,Sorry I was focusing on the wording here.A Boolean variable that represents whether you have found a non-nucleotide characterHow would you interpret such a variable holding the True value?Since it represents whether a non-nucleotide character has been found if its True then it means the sequence is unvalid. Then according to the description :the variable is initialised to True (a non-nucleotide has been found and the sequence is invalid)the variable is set to False (no invalid character found) if you find something that isnt a nucleotideIt simply doesnt make sense.Either that Boolean variable represents whether all the characters are valid :all_valid is initialised to Trueall_valid is set to False if you find something that isnt an A T C or Gor the variable really indicates if a non-nucleotide was found and non_nucleotide_found is initialised to Falsenon_nucleotide_found is set to True if you find something that isnt an A T C or G, Resolved,0
Wednesday September 11th 2013 8:22 pm -04:00,No Im not overthinking Im reporting what I believe to be an illogical phrasing.My post isnt concerned with the purpose of the function is_valid_sequence. It is fairly obvious that its return value should reflect whether an invalid character was found or not.My point is that a Boolean variable that is said to represent whether a non-nucleotide was found shouldnt be initialised to True and set to False upon encountering a non-nucleotide character.That wording is illogical., Resolved,2
Wednesday September 11th 2013 8:38 pm -04:00,>> the boolean does not hold the value of whether a non-nucleotide sequence was foundNo kidding?So when you read this sentence:use a Boolean variable that represents whether you have found a non-nucleotide characteryou understand that the boolean does not hold the value of whether a non-nucleotide sequence was found?, Resolved,0
Wednesday September 11th 2013 9:08 pm -04:00,>> It never says to set it to True if you find one in fact it says just the oppositeOn this we agree. It says to set it to False if you find one. And thats the problem.Yes there is a whole sentence there and that whole sentence suggests using a variable that represents whether a non-nucleotide was found initialise it to True and set it to false if you find incorrect characters. A more logical approach (and wording) in my opinion would recommend setting the opposite values., Resolved,0
Wednesday September 11th 2013 8:46 pm -04:00,What I mean is the phrasing would make more sense (to me) if the original text:Another way is to use a Boolean variable that represents whether you have found a non-nucleotide character; it would start off as True and would be set to False if you found something that wasnt an A T C or G.was changed into :Another way is to use a Boolean variable that represents whether you have found a non-nucleotide character; it would start off as False and would be set to True if you found something that wasnt an A T C or G., Resolved,0
Thursday September 12th 2013 5:09 am -04:00,Made the same mistake :-)They seem to consider that a zero length sequence is valid.You should have something likestudent: test_a2.TestIsValidSequence.test_is_valid_sequence_zero_lengthin your assignment report but are there other problems reported?, Resolved,0
Thursday September 12th 2013 5:55 am -04:00,Yes zero-length is valid., Resolved,3
Thursday September 12th 2013 6:03 am -04:00,Thank you Kevin and I apologize for prompting such a lengthy thread over a language detail., Resolved,0
Saturday September 21st 2013 11:16 am -04:00,Nice game Dmytro. Only when run from IDLE it seems to launch a console window once in a while (whenever a clear-screen is attempted?).,None,1
Saturday September 21st 2013 12:32 pm -04:00,Yeah its a pity IDLE doesnt seem to offer more text-control functionalities. Cant wait to see what Interactive Programming has in store for us.,None,1
Friday September 20th 2013 8:13 pm -04:00,Hello folks! This is my attempt. The game works with these data files.[ edited ],None,2
Saturday September 21st 2013 3:59 am -04:00,Oops thanks for reporting this. I used the visualiser website as a pastebin alternative but that wasnt a good idea. Edited.,None,0
Saturday September 21st 2013 4:08 am -04:00,To discourage players from peeking into the data file and cheat :-PData file #1 gives me no error locally. Strange.,None,0
Saturday September 21st 2013 4:45 am -04:00,I dont understand anything to encoding issues (run into them while experimenting with a different scrambling function which produced characters outside of regular ascii char-set).Checking with Notepadd++ all 3 files have ANSI encoding not UTF-8 and they work fine just as they are (for me that is).,None,0
Saturday September 21st 2013 10:16 am -04:00,Very nice!Did you learn doing graphics by following the Interactive Programming in Python course?,None,1
Saturday September 21st 2013 1:08 pm -04:00,Just a remark big words seem to stretch partly outside of the visible window into the 5th dimension.,None,0
Monday September 30th 2013 2:58 am -04:00,Coming from a Perl and Javascript background and Im impressed by Python. Its list oriented statements are dense and powerful its emphasis on code documentation is most welcome (cant wait to take Crafting Quality Code by the way) and overall it gives an impression of being a mature orderly and friendly language.,None,1
Friday October 4th 2013 5:33 am -04:00,It looks strangely familiar :-P,None,0
Friday October 4th 2013 8:19 am -04:00,Finally found my way through it although by using most unscientific trial-and-error.6d217e392d7e312d397c28272c222c2d2c39287f392d217e397f222b2c2d392d212b7e7e39297a2b7a202b7a29212c397f2b2826393b6d217e396028257d395b2e203b397b32395e7d207a2b395a25257a273969287e4739622d2c392b7e7a7d22272039307a2c392c2e20207e2c2d7e7d392227397a3929282c2d392227396622277d395f28287d3946395e312d2b7a39307e7e242532397c217a25257e27207e393c4b47396d217e396e6b6539307a2c39212d2d295348487b2828242c477e2c7e2b2f7e2b47282b20487f227c2d2228274829287e482028257d7b2e2047212d2625Will post the code later.Good luck Ravi. You can try to determine letter frequency in the cipher and also keep in mind that some letters can be doubled.,None,1

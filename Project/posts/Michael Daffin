Saturday August 24th 2013 9:04 am -04:00,In python there is no direct advantage to knowing the memory address of a varible but understanding how memory is assigned in a language can help with your understanding of aspects of that language. Most notably with arrays and objects (in particular copying of arrays and objects) and how the garbage collector works., Resolved,1
Saturday August 24th 2013 10:26 am -04:00,There is little point in printing it except to compare it to another reference (are two things pointing to the same address but there are better ways of doing that) and in languages like C/C++ you can manipulate the addresses to jump around the memory such as if you have an array of values in c (c arrays are just continuous chunks of memory in python they are more like linked lists) you can move around the array by adding to or other wise manipulating the value of the address stored in a variable (aka pointers in c).It is only really C/C++ where knowing the address a variable points to is of any use most other languages you do not need to know or worry about it as the language handles the memory for you so you dont have to.In python you should never need to worry about doing things like this so there is very little point in knowing the address of a memory location., Resolved,5
Sunday September 1st 2013 1:49 pm -04:00,You can but when you do you overwrite or shadow (depending on the scope level) the inbuilt max function. For this reason it is best not to use variable names that are the same as builtins.>>> max(45)5>>> type(max)<class builtin_function_or_method>>>> max = 5>>> max(53)Traceback (most recent call last):  File <stdin> line 1 in <module>TypeError: int object is not callable>>> type(max)<class int>>>> def max(a b):...     return a + b...>>> max(54)9>>> Python does not protect its inbuilt methods so you should be careful about redefining them., Unresolved,0
Saturday August 31st 2013 12:13 pm -04:00,This is because python knows that to do when you try to multiply a string with a number it concatenates that string with itself that many times:>>> print(he * 5)heheheheheThis is one more the more unusual rules in python but it is valid., Resolved,1
Sunday September 1st 2013 12:59 pm -04:00,The same is true for bash and most other shellsBut in C/C++ single quotes means a single character and double quotes means an array of characters.Each language treats them differently so you need to learn what they mean in each language., Resolved,1
Sunday September 1st 2013 1:03 pm -04:00,But it is best to stick to the PEP8 guidelines as it makes your code easier to read., Resolved,0
Sunday September 1st 2013 1:19 pm -04:00,This is due to the fact that python does not store the surrounding quotes in memory it only stores the contents of the string:>>> x = Hellowould mean that the stringHelloIs stored in memory.Python is just using the quotes to know when the string starts and ends after that it just ignores them. This is why when you print them out they appear without quotes:>>> print(x)HelloHowever when you use the shell to tell you what a variable contains it adds the quotes back in to tell you that is is a string as well as where the string starts and ends:>>> xHelloPython is simply pulling the value out of memory and then printing it out after adding the surrounding quotes. It does this to allow you to see hidden values as well as tell where the string actually starts and ends unlike print which just want to print it in the pretest way.>>> x =   HelloThere\\    >>> x  HelloThere\    >>> print(x)  Hello        There    >>>When coding it is better to see   HelloThere\     as you can tell exactly how the string is structured but when you want to display a value to a user you want it to replace all the funny values with what they mean (new line tab etc) which is why there is a difference between getting the shell to print a value and using the print function to do it., Resolved,1
Sunday September 1st 2013 1:31 pm -04:00,There is no difference >>> HelloThereHelloThere>>> x = HelloThere>>> xHelloThere>>> Hello... ThereHelloTherepython treats them all the same. The only difference you see if the difference in the way the shell prints a string and the way the print function does.>>> HelloThereHelloThere              # This is the shell trying to be helpful>>> print(HelloThere)Hello                       # This is actual output of the programThereIf you put the same code in a python scriptHelloThereprint(HelloThere)and run it you get:$ python hello.pyHelloThereYou only get the output of the print line., Resolved,0
Tuesday August 27th 2013 1:00 pm -04:00,What do you get when you call;>>> get_minutes(7500)?, Resolved,0
Tuesday August 27th 2013 9:10 am -04:00,The interactive python shell is useful for experimenting and trying things out however you have to retype the commands every time you start a shell.The .py files are where you put python scripts you want to run more then once so you do not have to re type them all of the time. Basically you use the interactive shell to experiment then you write the functions you want to keep for later to a file. Generally when developing a python program you write the program to files and then use the shell to run the files to inspect variables and test functions as you develop., Resolved,6
Tuesday August 27th 2013 12:53 pm -04:00,Every time you start a new session you start with a clean session - every thing you had defined in the last session is lost.When you load a file it is executed line by line as if you had executed it in the shell your self if you load multiple files then they will be executed one after another any conflicting names will be overwritten by the later files. E.G.:>>> def x():...     print(hello1)... >>> x()hello1>>> def x():...     print(hello2)... >>> x()hello2Notice how you can redefine a function but doing so you lose all access to the previously defined one. The same goes for loading functions from files the later definitions overwrite the earlier ones.Python allows you to import files and directories (aka modules) from other files or the shell (putting them into a namespace or as global functions) but this will likely be covered later in the course (though I cannot say for sure)., Resolved,1
Tuesday August 27th 2013 4:35 pm -04:00,I dont know how idle works but you can load a python file from the interactive shell or even from other python files by using the import statement:Given the file: modulename.py with the contents:function fn(x):    return x**2You import it in the shell with one of the following:>>> import modulename>>> modulename.fn(2)4>>> import modulename as mn>>> mn.fn(2)4>>> from modulename import fn>>> fn(2)4Note that the first two methods are preferred as they keep the global namespace clean reducing the chance of one module overwriting a function from another function.You should reset your shell every time you want to reload a file to ensure you are in a clean state every time else you can be chasing a bug for hours due to some left over variable from a previous import., Resolved,2
Tuesday August 27th 2013 7:16 pm -04:00,The whole notion of input is basically pointless in the interactive shell since we can just type:>>> jenjenand get the same result as >>> input(what is your name?)what is your name? jenjenbut with a lot more typing...Input is most useful when used inside python scripts where you cannot easily reassign variables at will. In that environment if you dont assign the return value of input to a variable it is lost forever. Consider the following python script: #!/usr/bin/python3input(What is your name? )name = input(Sorry I missed that... )print(O you said:  + name)If you execute the above script it will print out the following:What is your name? jenSorry I missed that... markO you said: markThere is no way to print or otherwise get that value returned by the first input it is lost forever.The interactive shell tries to be as useful as possible so it prints out the return value of functions if you dont assign them to a variable python scripts do not do this they just throw away the value and move on so if you dont store it in a variable you cannot access it again., Unresolved,2
Saturday August 31st 2013 10:04 pm -04:00,You started a triple quote string but did not end it so python found the end of the file before the end of the string., Unresolved,2
Tuesday August 27th 2013 4:47 pm -04:00,In python the spacing is very important it indicated where the blocks of code end (ie where a function ends):def func():   print(Inside the function) # Only executed when the function is calledprint(Out side the function)  # Executed straight awayfunc()Would print out:Out side the functionInside the function, Resolved,0
Tuesday August 27th 2013 5:44 pm -04:00,def to_24_hour_clock(hours):     (number) -> number    hours is a number of hours since midnight. Return the    hour as seen on a 24-hour clock.    Precondition: hours >= 0You are passing minutes to a function that takes hours as its argument., Resolved,0
Tuesday August 27th 2013 4:53 pm -04:00,What operating system are you running on? How are you running the modules?On linux (and possibally macs) you can run the specific version you want from the command line:python2 file.py  # for python 2.xpython3 file.py  # for python 3.xidle3    # for idle 3.xidle2    # for idle 2.x, Unresolved,1
Tuesday August 27th 2013 5:07 pm -04:00,Ensure you open the 3.3 version of idle you should have one version for each version of python you have installed., Unresolved,2
Wednesday August 28th 2013 5:33 am -04:00,In python there is no special meaning to the main() function it is a function like any other. Generally (most notablly in other languages) it is used to contain the code where you want to program to start executing but in python the program starts executing at the top of a file. You can however use the main() function in python like in other languages with the following template:def someFunction():    print(Do something)def someOtherFunction():    print(Do something else)def main():    someFunction()    someOtherFunction()if __name__ == __main__:    main()Here the top level of the file (the unindented lines) contain no code except the function definitions and an if statement.The if statement simply means execute the main function if the program is executed directly rather then being imported by another file. __name__ is a special python variable that contains the string __main__ if the file is the one that is executed not imported. so:$ python3 somefile.pyDo soemthingDo something else$ python3>>> import somefile.py>>> # Nothing printed as main() was not called during the import>>> main()Do somethingDo something elseSome advantages of this is that you can define the main function before other functions that it uses as you only need a function defined before you call it not before you reference it (such as like i did in the main function) which allows you to define the code in main at the top of the file and all the other functions after it rather then at the end where you would normally have to if you put it directly in the if statement body.,None,0
Saturday August 31st 2013 12:03 pm -04:00,Actually the print function returns None and it prints the value to the screen. The python shell tries to be helpful and prints out the return value of a function when it does not return None value.>>> def f():...     print(Hello)... >>> def g():...     return Hello... >>> f()Hello        # Hello is printed not returned>>> g()Hello      # Hello is returned and printed by the shell>>> a = f()Hello        # This was printed by f>>> print(a)None         # But f returned None>>> b = g()  # Nothing is printed by g>>> print(b)Hello        # But it returns the stringKnowing the difference is important when you run python scripts they will not print out the returned values like the shell does so it is important to know when you want to print something and when you want to return it., Unresolved,3
Saturday August 31st 2013 1:51 pm -04:00,You type the quotes around strings in python to tell python it is a string python does not store it with the quotes this is why when you print it out it does not print the quotes. When the shell shows you wants inside a variable or what was returned by a function it puts the quotes back around the string to indicate to you that it is a string:>>> a = Hello>>> aHello        # This is the shell trying to be helpful telling you that a is a string>>> print(a)Hello          # This is what would be printed to the command line in a normal programIf you assign the return value of a function to a variable then the shell does not print out the value:>>> def fn(value):...     return The value is  + str(value)...>>> fn(five)The value is five>>> x = fn(five)>>> xThe value is five>>> print(x)The value is five>>> print(fn(six))The value is sixYou can print and return in the same function as well.You should try typing the exercise into the shell and see what you get when you just call the function without assigning it to anything:>>> announce_location(Canada), Unresolved,2
Saturday August 31st 2013 2:26 pm -04:00,Not sure I can give more info without actually giving out the answer to the problem... I suggest you try entering the example into the python shell and see what you get. >>> x = fn(five)>>> ...Notice how nothing is printed out at all when you assign the return value directly to a variable., Unresolved,1
Saturday August 31st 2013 1:55 pm -04:00,announce_location(Canada)not announce_location(Canada)Strings must be surrounded by a quote (single  or double ) or python thinks you mean a variable.>>> canadaTraceback (most recent call last):  File <stdin> line 1 in <module> NameError: name canada is not defined>>> canadacanada, Unresolved,0
Friday August 30th 2013 6:29 pm -04:00,That is generally how GUIs work mainloop will loop until you close all the windows associated with it at which point it will return.GUIs tend to work off an event based system where you have a main loop that blocks until the application wants to exit and that loop continually checks for events such as mouse clicks or key presses and calls the appropriate functions when these events are triggered.,None,1
Saturday August 31st 2013 12:10 pm -04:00,You are meant to use not modify the to_24_hour_clock function., Unresolved,2
Saturday August 31st 2013 3:02 pm -04:00,You are meant to call it but you do not have to modify it., Unresolved,0
Saturday August 31st 2013 8:07 pm -04:00,No but you are meant to ;), Unresolved,0
Saturday August 31st 2013 8:49 pm -04:00,You can just call it which is what you are supposed to do as the exercise is all about function reuse not copy and pasting function bodies which is bad coding practice in general., Unresolved,0
Saturday August 31st 2013 9:58 pm -04:00,Click on the FAILURE link and see why they are failing., Unresolved,0
Sunday September 1st 2013 8:25 am -04:00,Caroline you are correct they can be solved in one line quite simply infact every question can be solved in one line., Unresolved,0
Monday September 2nd 2013 7:20 am -04:00,This is why you should test things properly before your submit and is where creating test harnesses is helpful here is one I created for the first assignment though it is a little late now :(, Unresolved,1
Monday September 2nd 2013 8:49 am -04:00,Non of the solutions require anything that has not been thought before (and all can be done quite simply on one line). And you should be able to test everything manually using only what has been thought although it is a little more tedious then an automated tester. , Unresolved,0
Monday September 2nd 2013 9:47 am -04:00,To test just call the function:>>> time_from_utc(+1 23.0)0.0   # Check if this is what you expectedHowever it is challenging to describe how to solve the functions as the solutions are just to simple. I think part of the problem is that people think the solution is more complicated then it actually is. Or they miss the description about converting the time to a 24 hour format., Unresolved,0
Monday September 2nd 2013 8:52 am -04:00,It might even be a completely different answer or question!, Unresolved,0
Saturday August 31st 2013 8:34 am -04:00,I am afraid I dont use idle so am not sure why you dont have a run option however:The reset option is not likely to be the same as the run option. It should reset the shell to its defaults (ie clear or variable and function definitions). The run option will do this as well before also running the given module so that you dont end up redefining variables as this can cause all sorts of bugs if you have a variable defined that you forgot about.You can load any module in the shell by running one of the following:>>> import file>>> file.somefunction()>>> from file import somefunction>>> somefunction()>>> import file as f>>> f.somefunction()>>> from file import *>>> somefunction()Note: the import file ... import the file into the given namespace (the module name by default or the value you used after as) where as the from file import ... imports the file into the global namespace so you can access the functions and variables directly but they could overwrite other values defined in the global namespace so you should be careful when doing this., Resolved,0
Monday September 2nd 2013 7:03 am -04:00,See the comments further down for a detailed explanation of why result is not 4, Unresolved,0
Saturday August 31st 2013 11:47 am -04:00,That is not true... when you add numbers they get summed not concatenated:>>> print(10 + 15)25not 10 15If they are both numbers python will sub the values like it should but if you do it to strings:>>> print(one + banana)onebananaIt will append one string to the other (note also it does NOT auto insert the space between them)If you try to add a number to a string you get a type error:>>> print(1+banana)Traceback (most recent call last):  File <stdin> line 1 in TypeError: unsupported operand type(s) for +: int and strPython knows what type the variables are and will behave as best it can depending on what they are.PS: if you pass multiple strings to the print function without adding them then it will add a space separator:>>> print(one banana)one bananaThis is because print knows about the separate arguments when you do it this way but does not when you add the strings your self. You can even change the separator that it uses:>>> print(one banana sep=-)one-banana, Unresolved,2
Saturday August 31st 2013 11:51 am -04:00,The full question: Consider this code:def sum(number1 number2):    print(number1 + number2)result = sum(1 3)new_result = result + 1What is the outcome of executing the code above? new_result refers to the value 5 TypeErrorThe correct answer is TypeError as what actually happens is you pass 1 and 3 to the sum function it sums these values and prints out 4. Then it returns None and that value gets stored in result (by default if you do not return anything from a function in python it will return None when it reaches the end of the function). Finally it tries to add 1 to None which results in a type error., Unresolved,4
Sunday September 1st 2013 8:19 am -04:00,You do not strictly get 4 you get None and 4 is printed to the screen the actual value stored in result after executing result = sum(1 3) is None.>>> def sum(number1 number2):...     print(number1 + number2)... >>> result = sum(1 3)4>>> result>>> print(result)None>>> type(result)<class NoneType>If you want to know more about the difference between print and return read this post., Unresolved,5
Saturday August 31st 2013 3:06 pm -04:00,The point is that you are meant to be as strict as possible the function can only ever return an int then its return type is integer however if the function can return both ints and floats (depending on the input) then its return type is the more generic number type., Resolved,3
Saturday August 31st 2013 9:10 pm -04:00,Thats just the way it is done in python and it is better to stick with convention then try to change it now or you just introduce inconsistency., Resolved,0
Saturday August 31st 2013 9:28 pm -04:00,enter when defining a function or other block of code python will give you a continueation line:>>> def f(x):<enter>...     return x + 1<enter>  # Remember to indent this line or python will think you have ended the function... <enter> # hit enter on an empty line to end the function definition>>> f(3)<enter>4Note replace <enter> with the enter/return key do not type the < >, Resolved,0
Monday September 2nd 2013 4:50 am -04:00,What exactly are you typing?, Resolved,0
Tuesday September 3rd 2013 8:19 am -04:00,The enter/return key, Resolved,0
Saturday August 31st 2013 2:02 pm -04:00,If you put it in a script you have to use print try this:def bigger(x):    return x ** xprint(bigger(12))Your version only works in the shell because the shell tries to be helpful and print out variables and return values of functions. But in real programs these would obscure the output you actually want so you have to use print when you want to print a value out., Unresolved,0
Saturday August 31st 2013 3:34 pm -04:00,The convention is python is to use a string... thats just the way it is. You `could` use comments but then it will not be picked up by parses such as for the help function., Unresolved,1
Sunday September 1st 2013 12:57 pm -04:00,Actually it is just the way coursera works all assignments have two deadlines but it depends on the course as to what happens when you exceed the first. Some courses you will receive a penalty if you submit after the first deadline usually increasing each day late you submit up until the hard deadline at which point you can no longer submitOn this course however they have chosen not to give you any penalty if you submit after the first deadline. So the only real deadline is the hard deadline.That said you should be aiming to submit before the first deadline to keep you on track otherwise the assignments will start to pile up., Resolved,3
Saturday August 31st 2013 8:56 pm -04:00,idle will save as plain text (it would be a useless python program is it didnt!!) you should be fine on that front. Be wary of print vs return I think it is catching allot of people out see this post for more info.Other than that check the details on why each test failed try to figure out why it failed and see if you can solve the problem. If you need help on a particular problem pasting the error message that the tests through will help us give you better advice., Unresolved,0
Monday September 2nd 2013 3:01 pm -04:00,That is just the name of the test click the FAILURE link to see the error. But it basically means you are not using the to_24_hours function., Unresolved,1
Saturday August 31st 2013 7:14 pm -04:00,High level programming languages are introduced so we do not have to think about memory management but it is still important to understand how it all works.Most notably when dealing with object otherwise how are you going to understand the following:>>> class A:...     def __init__(self):...         self.x = 5...>>> p = A()       # A new object is stored in the heap and an address in p>>> p.x5                 # 5 as we expect>>> l = p         # l now shares the same address as p>>> l.x5                 # Also as we expect>>> p.x = 10      # But what happens to l.x???>>> p.x10                # As we expect>>> l.x10                # Not easy to know why unless you know that l and p refer to the same address>>> import copy>>> m = copy.copy(l) # m now refers to a copy of l stored in a new memory location>>> m.x = 15>>> m.x15                # m.x can now be changed independently of l and p>>> l.x10                # l and p are unaffected by the change to m as they point to a different memory address>>> p.x10What the high level language allow you to do is not worry about deleting the values:>>> l = None         # Now only p refers to the object>>> p = None         # Now nothing refers to the objectIn other languages like C/C++ this would cause a memory leak the values still exist in memory but you have lost the address where they are stored. In python the garbage collector will clean this up for us so we dont need to worry about it. But it is still important to know how values are stored in memory.If you dont understand this very early then it can be much harder to teach things later on and much harder to understand why the values changed like they did above. , Resolved,2
Saturday August 31st 2013 7:35 pm -04:00,Or even worst logic errors where the code runs fine but does not do what you think it does., Resolved,1
Sunday September 1st 2013 8:32 am -04:00,I disagree it is hard to understand but it is important as it will help you understand things later on. Its one of those things that seems hard now but you will be glad you understand it later on., Resolved,2
Saturday August 31st 2013 8:06 pm -04:00,There seems to be quite a bit of confusion about the difference between the print statement and the return statement. I think this is due to not understanding what the shell is doing for you.The interactive python shell is what is known as a repl shell (read eval print loop) which means it read in what you typed evaluates it and then prints out the value. This is why when you type a variable or function call it prints out what was returned:>>> a = Hi>>> aHiThis is the repl telling you that a contains the string Hi if this where a python script you would get no output at all as you are not printing anything.>>> a = Hi>>> print(a)HiThis is the python program printing out Hi and returning None (which the repl does not print out for you. If you ran this in a python script you would get the output Hi printed to the screen.This applies to function calls as well:>>> def fn(x):...     print(The value is:  + str(x))... >>> fn(5)The value is: 5>>> a = fn(5)The value is: 5>>> a>>> print(a)None>>> type(a)<class NoneType>Here the function prints the message and returns None. When we try to store the return value in a all we do is store the value None (pythons null value). This function is equivalent to:>>> def fn(x):...     print(The value is:  + str(x))...     return None  # This line is implied if you dont specify it like above...or >>> def fn(x):...     print(The value is:  + str(x))...     return     # Defaults to returning None...In contrast:>>> def fn(x):...     return The value is:  + str(x)... >>> fn(5)The value is: 5>>> a = fn(5)>>> aThe value is: 5>>> print(a)The value is: 5>>> type(a)Here the function returns the message it never prints it out. However the repl will try to be helpful and print out the return value when you dont assign it to anything this allows you to see what the function returns without actually assigning it to anything. But when you do assign it to a value nothing gets printed out unlike in the previous example and when we inspect the contents of a we get the message that was returned as appos to None.Note that you can print and return a value in a function:>>> def fn():...     print(This line is printed)...     return The line is returned... >>> fn()This line is printed  # This line is always printed when the function is calledThis line is returned>>> a = fn()This line is printed  # This line is always printed when the function is called>>> a          # To see what is inside aThis line is returned>>> print(a)   # Actually print a outThis line is returnedHope this helps., Resolved,7
Saturday August 31st 2013 8:30 pm -04:00,Did you copy it into word in the first place? if so word might not have auto corrected your quotes and other symbols., Resolved,0
Saturday August 31st 2013 8:29 pm -04:00,DO NOT USE WORD TO CODE.  Word is for document writing not code writing python is very strict with the whitespace and indentation and word likes to screw this up. I recommend using notepad++ if you are on windows.Word is probably also converting your single () and double quotes () to the left/right single (‘ ’) and double (“ ”) quotes. Though it is hard to tell these are different characters and python dose not understand the left/right ones. Word will also convert -- to – and many other things that will trip you up while coding., Resolved,6
Saturday August 31st 2013 9:39 pm -04:00,*cough cough* vim *cough cough* ;), Resolved,2
Saturday August 31st 2013 8:44 pm -04:00,Yes the type number means any type that is a number including int and float and is used when the type can be either such as:def pow(x y): # Inputs can be float or int     (number number) => (number)     return x ** y  # float if x or y is a float else intdef div(x y): # Inputs can be float or int     (number number) => float     return x / y   # Python division always returns a floatIt is incorrect to say the second function will return a number as it will never return an int only floats., Unresolved,1
Saturday August 31st 2013 8:38 pm -04:00,Indentation is important the indentation level indicates when a block of code ends. Given the python script:def fn():    print(Inside fn)print(Outside fn)fn()print(Also outside fn)fn()python script.pyOutside fnInside fnAlso outside fnInside fnThe reason why nothing happens when you type it in the shell is because you have an empty function and the print outside the function is trying to use undefined variable as they are only defined inside the function.Also see this for more information on the return vs print., Resolved,1
Saturday August 31st 2013 9:05 pm -04:00,The grader will tell you why it failed you for a specific function check it out and see why you are failing. Once you know that see if you can fix the problem. See this post for more info., Unresolved,0
Saturday August 31st 2013 9:23 pm -04:00,Probably due to the functions working but returning the wrong result. You will find the program will run but not give you the correct output., Unresolved,0
Saturday August 31st 2013 9:36 pm -04:00,Could be that the tinker clock is not calling your functions with parameters that would cause it to fail where as the test harness is. Or at it is correcting the errors in your function that the test harness wont., Unresolved,0
Saturday August 31st 2013 9:06 pm -04:00,Definitely not before the hard deadline.,None,0
Sunday September 1st 2013 8:58 am -04:00,It gets stored as the return value of the function call which the visualizer does not show very well or even at all :(Effectively when the the visualizer says return 4 it is simplifying the expression tox = 4 + f(x + 2)and then moving on to the next function call evaluating that to 6 returning it and simplifying it tox = 4 + 6the visualizer does not show these values nor does it show the static values (such as the + 1) but they are there and are in memory. It only shows the variables and the value they point to so is a little misleading., Unresolved,0
Monday September 2nd 2013 6:44 pm -04:00,You use a function by calling it with some parameters (if it has any):>>> to_24_hours(83) # this calls the function with 83 as the parameter11>>> x = 83>>> to_24_hours(x)   # this calls the function with the value of x (83) as the paremater11>>> to_24_hours(5 + x)  # this calls the funtion with the value of x + 5 (88) as the parameter16The assignment wants the result in the 24 hours format so you should be returning the value that that fnction returns., Resolved,1
Sunday September 1st 2013 8:37 am -04:00,What error do you get?, Resolved,0
Sunday September 1st 2013 11:34 am -04:00,Looks like you might be using int where you should be using a number like 3 6 1.See this for more info., Resolved,0
Sunday September 1st 2013 12:05 pm -04:00,int is a type and 60 is a string so you are trying to divide a type by a string.>>> type(int)<class type>>>> type(60)<class str>Dont use int as a variable name it will just confuse you and lead to errors like this. Instead use names to describe the variable like seconds or minutes.>>> type(60)<class int>>>> minutes = 5>>> type(minutes)<class int>Also dont quote integers when you dont want them to be a string quoting a value tells python you really want it to be represented as a string., Resolved,0
Sunday September 1st 2013 11:18 am -04:00,You are probably seeing the issue represented on this post. Basically dont use print use return. You function is returning None which is not correct so the autograder is correctly marking you wrong., Resolved Locked,0
Sunday September 1st 2013 11:26 am -04:00,Technically it would be a ddos attack :) I doubt one user could bring the service down.Steven if it is a ddos attack then it is an involuntary one not a malicious one. Basically the servers might not be able to cope with the legitimate traffic to it at which point people will resubmit thinking something went wrong their end causing even more traffic going to it... , Resolved Locked,0
Sunday September 1st 2013 12:08 pm -04:00,The hard headline is a week away and there is no penalty for submitting after the soft deadline. So dont worry just try again tomorrow and you wont be penalised., Resolved Locked,0
Sunday September 1st 2013 11:09 am -04:00,Your indentation is wrong python is very strict about this as it tells python exactly when a block of code ends:def fn():    print(inside the function)print(outside the function)fn()Produces:outside the functioninside the functionOne gotcha with python is it treats tabs and spaces differently you can use either but you have to keep it the same for each block of code take the following where leading spaces have been changed to . and tabs to ---> for claritydef fn():....print(inside)...print(error)    # Here you are missing a space (represented by .)def fn():....print(inside)--->print(error)  # Here tabs are used when before you where using spacesdef fn():--->print(inside)....print(error)  # Here you switched to spaces when you were using tabsdef fn():..--->print(inside)..--->print(also valid) # it is valid to mix white space as long as you are consistent--->..print(error)      # but i has to be exactly consistentPython does not care which you use or how many use use as long as you keep it the same ie always use a tab or always use 4 spaces.Convention is python is to always use 4 spaces and I recommend you stick to this. Note that all decent editor can be configured to interpret the tab key to insert 4 spaces when in leading white space (ie notepad++ will do this)., Unresolved,1
Sunday September 1st 2013 11:43 am -04:00,Please do not post solutions.But your problem is indentations:def time_from_utc(utc_offset time):     (number float) -> float    Return UTC time in time zone utc_offset.    >>> time_from_utc(+0 12.0)    12.0    >>> time_from_utc(+1 12.0)    13.0    >>> time_from_utc(-1 12.0)   11.0    >>> time_from_utc(+6 6.0)    12.0    >>> time_from_utc(-7 6.0)    23.0    >>> time_from_utc(-1 0.0)    23.0    >>> time_from_utc(-1 23.0)    22.0    >>> time_from_utc(+1 23.0)    0.0         return <solution hidden to comply with honor code>   # Here you have one too many spacesdef hours_difference(time_1 time_2): (number number) -> float  # This and the rest should be indentedReturn the number of hours later that a time in secondstime_2 is than a time in seconds time_1.>>> hours_difference(1800.0 3600.0)0.5>>> hours_difference(3600.0 1800.0)-0.5>>> hours_difference(1800.0 2160.0)0.1>>> hours_difference(1800.0 1800.0)0.0return <solution hidden to comply with honor code>, Unresolved,0
Sunday September 1st 2013 12:12 pm -04:00,Sorry you are not meant to remove the solution you are meant to fix the indentation I removed the solution as you are not meant to post solutions to exercises on these forums., Unresolved,0
Sunday September 1st 2013 12:19 pm -04:00, is the representation of the new line character it should be at the end of every line the error message is just showing that.On that note it is also showing another problem:(./a1.py 84 25  def get_hours(seconds):)more notably:  def ge...Notice the space between the  and the def? that means there is a space which python thinks is an indented block but is confused that as there shouldnt be an indented block there., Unresolved,0
Sunday September 1st 2013 12:49 pm -04:00,It is on every new line it is just text editors see it and then show any following text on the next line rather than printing it out.try this:>>> with open(somefile.txt w) as f:...     f.write(Helloworld)...It will create a file with the contentsHelloworldbut when you open it in a text editor you getHelloworldThe new line character is there but the editor does not display it.Note: on windows programs generally use \r (the new line and line feed characters) to separate new lines so if you open the above in notepad you might just getHelloworldIf so try the following:>>> with open(somefile.txt w) as f:...     f.write(Hello\rworld)..., Unresolved,-1
Sunday September 1st 2013 10:59 am -04:00,We have not yet been taught if but I do not know if the grader will mark you wrong if you do use it.All the solutions can be done on one line using function calls and the arithmetic operations ( / // % + - * ). I suggest you try to find the solution using these as that is what the assignments are trying to teach.Hint (if you are trying to do what I think you are):>>> 7 + -52, Resolved,1
Sunday September 1st 2013 11:13 am -04:00,This is why we should use the iso date format on the web: 2013-09-1 hard to confuse that :), Resolved,0
Sunday September 1st 2013 11:52 am -04:00,There appears to currently be a problem with the autograder. Hopefully it will be back shortly. , Resolved Locked,0
Sunday September 1st 2013 1:32 pm -04:00,While you wait for the autograder to come back online you might want to try my test harness see this post for more details., Resolved Locked,0
Sunday September 1st 2013 1:39 pm -04:00,You can also try this to test your code on your local box before submitting it to the autograder., Resolved Locked,1
Sunday September 1st 2013 12:30 pm -04:00,I had created a test harness to test my code but due to the number of errors people seem to be having with the grader I have decided to publish it.The code is available on github here. Simply download and extract it or copy it to a file called a1_test.py and place it in the same directory as a1.py. Then simply run it as you would run a1.py either in idle by running the module then calling main>>> unittest.main() or on the command line:$ cd /path/to/where/a1.py/is$ python a1_test.pyor in a python shell>>> import a1_test>>> a1_test.unittest.main()It does not contain any solutions to the problems it only calls your functions and sees if they output the correct values.Hope this help!Note: This is simply my test harness it does not work exactly how the autograder works so might produce different results., Resolved,6
Sunday September 1st 2013 1:59 pm -04:00,Most likely you have not indented your code correctly:def fn():    print(inside)print(outside)fn()produced:outsideinsideLook for code like:def fn():return 5And correct the indentation:def fn():    return 5Note that it should also tell you which line the error occured on: Traceback (most recent call last):  File a1_test.py line 2 in <module>    from a1 import *  File /home/james/Development/learning-to-program/a1/a1.py line 2    print( 5)        ^IndentationError: expected an indented blockThat shows that a syntax error happened on line 2....F....======================================================================FAIL: test_seconds_difference (__main__.TestA1Functions)----------------------------------------------------------------------Traceback (most recent call last):  File a1_test.py line 7 in test_seconds_difference    self.assertEqual(seconds_difference(1800.0 3600.0) 1800.0)AssertionError: 5 != 1800.0----------------------------------------------------------------------Ran 9 tests in 0.001sFAILED (failures=1)This one shows that it was testing the seconds_difference function so the error is somewhere in the logic of that function, Resolved,1
Sunday September 1st 2013 2:13 pm -04:00,Thanks for that I have added it to the test harness, Resolved,0
Sunday September 1st 2013 2:12 pm -04:00,Interesting it appears to have run successfully then crashed when exiting :S.........----------------------------------------------------------------------Ran 9 tests in 0.011sOKShows it ran all the tests successfullyWhat happens if you change the last line to    unittest.main(exit=False)?, Resolved,0
Sunday September 1st 2013 2:26 pm -04:00,Strange I cannot seem to replicate that issue here :(, Resolved,0
Sunday September 1st 2013 2:35 pm -04:00,I dont think I can solve this issue without your code which is against the honor code so there is not much I can do about it., Resolved,0
Sunday September 1st 2013 7:23 pm -04:00,You seem to be off by a factor of 100 (25 instead of 0.25). Also there is no reason to run a1.py first a1_test.py does this for you., Resolved,0
Sunday September 1st 2013 7:21 pm -04:00,For any reason other than the duplicate line (that has now been removed)?, Resolved,0
Sunday September 1st 2013 1:41 pm -04:00,There seems to be a problem with the auto grader in the mean time I suggest you check out this. It will allow you to test your code offline while the autograder catches up with everyone submitting their code at once., Resolved Locked,3
Sunday September 1st 2013 1:51 pm -04:00,Try my offline test harness I mentioned in the previous post. It will at least tell you if your functions are producing sane results., Resolved Locked,0
Sunday September 1st 2013 2:18 pm -04:00,It should just be a file called a1_test.py. _pycache_ and .pyc sound like you have tried to run it (pyc is the compiled version of the code that python create when you run a .py file). Do you have the file called a1_test.py?If so try running it on the command line:cd /path/to/the/python/filespython3 a1_test.pyOr run it as a module in idle then in the shell type:>>> main(), Resolved Locked,0
Sunday September 1st 2013 2:02 pm -04:00,The hard deadline is not until next week and there is no penalty until then so there is no need to worry., Resolved Locked,0
Sunday September 1st 2013 6:58 pm -04:00,Actually you can call a function from itself it is called a recursive function but normally when coding them you have to have an exit condition at some point your program will error with RuntimeError: maximum recursion depth exceededBut recursive functions are a more advanced topic then we are currently at :), Resolved,1
Monday September 2nd 2013 4:52 am -04:00,wordis the string wordwordis the variable word.You are using a static string where you want to be using a variable., Resolved,5
Monday September 2nd 2013 7:44 am -04:00, Count the vowels in the string.Should be Count the vowels in word.as it would not make sense if you have more then one string in the parameter:def fn(one two):    (string string) => int    Counts the number of characters in string that also appear in string^^ That doesnt make much sense if you dont refer to the arguments by name., Resolved,2
Monday September 2nd 2013 7:34 am -04:00,How are you running it what error does it give?, Resolved,0
Monday September 2nd 2013 7:32 am -04:00,Hours should be reported in the 24 hour format (hours 0-23) 2160 is not in the 24 hour format the correct answer for that value is 0, Resolved,0
Monday September 2nd 2013 2:57 pm -04:00,Other way around the grader is looking for 9 but the function is returning 105... , Resolved,0
Monday September 2nd 2013 2:58 pm -04:00,It is defined in a1.py no need to modify it just use it., Resolved,0
Monday September 2nd 2013 7:27 am -04:00,The grader uses different parameters to the ones given in the assignment you should test your code with various other values as well. It would appear that even tough your code it working for the examples you tested it with it does not for every possible value.Generally programmer forget to test their code with a wide enough range of values what happens if you input large values? or values near boundary condition (like multiples of hours or minutes)?, Unresolved,0
Monday September 2nd 2013 3:03 pm -04:00,The grader tests more inputs then are shown in the examples you have to try your code with more input then the ones in the examples.This is to make sure it works for any value rather then just the examples they gave you., Unresolved,0
Monday September 2nd 2013 7:12 am -04:00,Unless the function is needed in a high preformace environment you should not need to worry about it. Do not optimise early get the code working first then optimise the parts that are slow. This is how you should write all applications. It is also generally more important for code to be readable then for it to be highly optimised.However I would generally prefer the form:def example1(ab):    return already_defined_function(b-a)as I find it easier to read however if the expression becomes too long it is best to split it out into multiple lines:def example1(ab):    return already_defined_function(yetanotherfunction(b) - anotherfunction(a))Is easier to read as:def example1(ab):    a = anotherfunction(a)    b = yetanotherfunction(b)    return already_defined_function(b - a), Unresolved,0
Monday September 2nd 2013 9:40 am -04:00,Note that the hard deadline is a week away and there is no penalty until that date. Take your time do the assignment correctly.The deadline today is only a soft deadline (without penalty if you miss it) and is mean to keep you on track but you still have a week to submit it., Resolved,1
Monday September 2nd 2013 6:22 pm -04:00,If you dont want to wait (or even go through the submission process over and over) you can use my offline test harness see this post. Once it passes that then try submitting and see if anything else fails., Resolved,0
Monday September 2nd 2013 5:43 pm -04:00,This is why I always middle click links :), Unresolved,6
Tuesday September 3rd 2013 8:54 am -04:00,Depends on how it is not working if it is erroring then no it doesnt help any more then the shell but if it is returning the wrong value then stepping through the steps can help fund out where your logic is going wrong.It is basically a debugger (a fairly crude one designed to show whats happening in a simple way) but a debugger non the less. Even proficient programmers use debuggers to help them understand what is going on with their program the only real difference is the debuggers they use dont show the stack and heap the way the visualiser does they tend to show just the value of variables and have more advanced control for stepping through a program., Unresolved,0
Monday September 2nd 2013 6:14 pm -04:00,(math_grade >= 50 or math_grade >= 80) and (bio_grade >= 50 or bio_grade >= 80) and (cs_grade >= 50 or cs_grade >= 80)Is incorrect as if it does not match the at least one A If math_grade = 50 and bio_grade = 50 then the expression is True but it should be False. Infact the whole expression is more complicated then it needs to be:(math_grade >= 50 or math_grade >= 80)can simply be math_grade >= 50as the second part is only True when the first part it True and the boolean operator or is used so only one of them has to be True for the expression to be True., Resolved,1
Tuesday September 3rd 2013 8:16 am -04:00,On the very last question (there are two questions at the end of the video):The minimum passing grade is 50 the minimum grade for A is 80 and variables math_gradebio_grade and cs_grade represent a students final grades in three courses. Select the expression(s) that correspond with the English sentence:The student passed all their courses and earned at least one A.* ((math_grade >= 50 and bio_grade >= 50 and cs_grade >= 50) and (math_grade >= 80 or bio_grade >=80 or cs_grade >= 80))* (math_grade >= 50 or math_grade >= 80) and (bio_grade >= 50 or bio_grade >= 80) and (cs_grade >= 50 or cs_grade >= 80), Resolved,0
Monday September 2nd 2013 6:06 pm -04:00,If you have access to a web browser then try this: http://www.compileonline.com/execute_python3_online.php, Unresolved,0
Monday September 2nd 2013 6:29 pm -04:00,They said in the video lectures an if has to end with 0 or 1 else sections that means it is optional so ending with and elif is valid python.if condition:          # Manditory    passelif anothercondition: # Optional and can use multiple times    passelse:                  # Optional but can have at most once.    passHowever if you want to have an else clause it has to be the last clause:if condition:          # Manditory    passelse:                  # Valid as you dont have to have an else clause    passelif anothercondition: # Invalid you have already specified an else you cannot have any more clauses    pass    The reason for this is that python only executes the first condition that matches and skips all the other condition if you get to the else line then non of the previous conditions have been met so python executes it regardless meaning any future elifs will never run (and so python treats it as an error), Resolved,5
Tuesday September 3rd 2013 9:15 am -04:00,I would do the same use python3 in new projects in general only use python2 when you require a library that has no python3 equivalent.For existing code I would look at making it compatible with python3 (using the newer stuff that has been back ported to python2.7 such as the print function rather then the print statement and stop using the stuff that has been removed in python3) or if the time allows converting the projects you can to python3.You can write code that will work on both python2 and python3 as most of the features have been backported to python2.7 if you must write python2 I advise writing it in the python3 way so it is easier to switch later./grumble/ Annoyingly I am having to write python2.6 where I work as centos still does not have python 2.7 :(,None,0
Thursday September 5th 2013 12:36 pm -04:00,Dont really want to compile from source since we dont use it as a major language but only the odd script.,None,0
Wednesday September 4th 2013 8:16 pm -04:00,The terminal is a very powerful way to interact with a computer. Allows you to do far more things in an automated fashion often much quicker than you can with a gui tool. However it does have a much higher learning curve then gui tools.On a decent modern operating system the terminal emulator can handle the mouse and even do graphics :)IDLE is basically the python shell + some extra features (mostly autocomplete interactive help and an inbuilt editor) there is nothing you cannot do in the python shell that you cannot do in IDLE. Infact there is nothing you can do in IDLE that you cannot do in a python shell and any old text editor. You can use either to write your applications or even switch between them at will. IDLE does give you some nice features like autocomplete which the shell does not. However external editors tend to be much nicer at writing larger projects.I tend to find idle is great for starting out but is too basic to write more complicated programs in. ,None,1
Thursday September 5th 2013 2:30 pm -04:00,Modulus gives the the remainder so wraps around if you have value grater then the modulus: >>> for x in range(0 120 10):...     print(x % 60)... 0   # 0%6010  # 10%6020  # 20%6030  # 30%6040  # 40%6050  # 50%600   # 60%6010  # 70%6020  # 80%6030  # 90%6040  # 100%6050  # 110%600   # 120%60Which is why it is great at removing all of the hours from the value, Resolved,0
Thursday September 5th 2013 4:20 pm -04:00,It means that the output of your function did not match the expected value. 9 != 21 your function returned 9 or 21 but it should have returned the other one., Resolved,1
Friday September 6th 2013 7:50 am -04:00,That is what the modulus operator is for it shows the remainder from the division:10 % 60  = 10:  10 / 60  = 0 + 10/6030 % 60  = 30:  30 / 60  = 0 + 30/6050 % 60  = 60:  50 / 60  = 0 + 50/6060 % 60  = 0:   60 / 60  = 1 + 0/6070 % 60  = 10:  70 / 60  = 1 + 10/60110 % 60 = 50: 110 / 60 = 1 + 50/60120 % 60 = 0:  120 / 60 = 2 + 0/60, Resolved,0
Sunday September 8th 2013 12:11 pm -04:00,9 is what the test expects your function to return 105.5555 is what your function is returning.Assuming this is for the get_hours function you have two problems first 105.5555 is not an integer get_hours should return an int (as should get_minutes and get_seconds) and second get_hours should return the number of hours since midnight so should never be greater than 23.You should test your function on very large values ie > 24*60*60 which is where this problem occurs., Resolved,1
Sunday September 8th 2013 12:58 pm -04:00,You are probably using / (division) when you should be using // (integer division), Resolved,1
Thursday September 5th 2013 2:16 pm -04:00,Your calculations must be wrong you seems to be doing:45/60 = 0.759/60 = 0.150.75+0.15 = 0.9but 9 secs/60 = 0.15 minutes not hours so what you are doing is (9+45 minutes) / 60 = 0.9 hours rather then 45 minutes + 9 seconds /60 = 0.7525 hours, Resolved,0
Thursday September 5th 2013 3:47 pm -04:00,The solution is valid python but not equivalent to the code in the question as it will not return false if temp is not equal to 22.5 but instead return none: >>> def checkTemp(temp):...     if temp == 22.5:...         return True...>>> print(checkTemp(22.5))True>>> print(checkTemp(44))Nonevs>>> def checkTemp(temp):...     return temp == 22.5...>>> print(checkTemp(22.5))True>>> print(checkTemp(44))False, Resolved,2
Thursday September 5th 2013 5:09 pm -04:00,! means not in most programming languages != means not equal, Resolved,1
Thursday September 5th 2013 3:29 pm -04:00,Yes return is only used to return from a function an if statement is not a function it was a way to control the flow of a program. Function start with  def as in def fn():. Note that : just indicated to python a block of code is starting (ie a block of code that belongs to an if or a function or a while loop etc). Note that you will often see returns inside if statements but they are not for the if they are to exit a function depending on a condition:def fn(value):    if value > 5:        return 5    elif value < 0:        return 0    else:        return valueThis is basically the same as:def fn(value):    if value > 5:        value = 5    elif value < 0:        value = 0    return value, Unresolved,1
Thursday September 5th 2013 3:36 pm -04:00,He is closing it at the end of the line and then reopening it You are missing the colon at the end of the if if scheduled_time==estimated_time      return on timeshould be  if scheduled_time == estimated_time:      return on timeWhen you get an error it tells you what the error is and where it occured:  File test.py line 16    if scheduled_time==estimated_time                                    ^SyntaxError: invalid syntaxIs what I get when i try to run your original code it tells you the error is on line 16 and even point to where the error is with a ^. Even if you do not understand it posting the full error can help others show you where the problem is., Unresolved,0
Thursday September 5th 2013 3:40 pm -04:00,You are still not indenting you are also missing a colon at the end of the if:def report_status(scheduled_timeestimated_time):      (numbernumber)->str      Return the staus of a flight based on its arrival and expected time      Precondition: 0.0<=scheduled_time<24 and 0.0<=estimated_time<24      >>>report_status(14.314.3)      on time      >>>report_status(12.511.5)      early      >>>report_status(9.09.5)      delayed            if scheduled_time == estimated_time:          return on timeThe indents are very important you also cannot mix spaces and tabs., Unresolved,0
Thursday September 5th 2013 3:50 pm -04:00,grade1 = 55grade2 = 55if grade1 >= 50 and grade2 >= 50:    num_passed = 2if grade1 >= 50:    num_passed = 1if grade2 >= 50:    num_passed = 1print(num_passed)What do you think that will print out?, Resolved,2
Friday September 6th 2013 7:38 am -04:00,if both grade1 and 2 are greater then 50 then num_passed gets set to 2 by the first if then reset to 1 by the second if and then reset to 1 by the third if again try it in the visualiser., Resolved,2
Friday September 6th 2013 7:40 am -04:00,yes some of the code is missing but it is only the assignmentsgrade1=70grade2=80num_passed = 0   # This is required as it must be defined before you try to use itif grade1 >= 50:    num_passed = num_passed + 1if grade2 >= 50:    num_passed = num_passed + 1But the logic is valid: add one to num_passed for each grade that is more then 50 so it basically counts the number of passed grades., Resolved,3
Friday September 6th 2013 6:34 pm -04:00,When you use import math it imports the math library to the namespace math >>> math.ceil <built-in function ceil>Here you have not called the function but just referenced it like you would any other value. (Note you can pass functions to other functions using this see below)>>> ceil(84.2)Traceback (most recent call last):  File <pyshell#120> line 1 in     ceil(84.2)NameError: name ceil is not defined...............so I try this>Here you call the ceil function but it does not exist there is no ceil function in the global namespace since you have imported it into the math namespace you should call it by referncing the namespace:>>> math.ceil(84.2)85Finally:>>> from math import ceil>>> ceil(84.3)85Here you import the ceil function from the math library into the global namespace so you do not need to reference the math namespace., Resolved,0
Friday September 6th 2013 6:57 pm -04:00,If does not have to finish with else but it may finish with else. Else basically means if non of the previous conditions matched but you do not always care or want to do anything if non of the conditions matched.However due to the nature of the code it would have been more efficient (as python does not need to evaluate `temp != 22.5) to just an else instead of an elif and is equivalent to the following:if temp == 22.5:    return Trueelse:                      # We know that temp is not 22.5 since we have already checked to see if it is    return False, Resolved,1
Saturday September 7th 2013 6:29 am -04:00,Because it does not do exactly the same thing it returns True when temp is equal to 22.5 but it never returns False it actually returns None when temp is not equal to 22.5:  >>> def fn(temp):...     if temp ==22.5:...         return True...>>> print(fn(22.5))True>>> print(fn(5))None, Resolved,2
Saturday September 7th 2013 6:33 am -04:00,The question assumes you are already in a function otherwise the question does not make any sense:Consider this code:return temp == 22.5Select the code fragment(s) that are equivalent to the one above., Resolved,0
Saturday September 7th 2013 10:37 am -04:00,Probably because it is a built in the global frame would be very busy if it included every single builtin function as these are always availble even if you do not call them so the visualiser probably just hides it.You have to keep in mind that there is actually a lot more going on then the visualizer shows to be of any help it hides a lot of the details that you just dont need to worry about (such as built in functions), Unresolved,0
Saturday September 7th 2013 6:52 am -04:00,And if you need to use sqrt inside my_functions you just use the import inside the my_functions.py file:my_functions.pyfrom math import sqrtdef dosomething(n):    return sqrt(n) + nmain.pyimport my_functionsx = my_functions.dosomething(2)print(x), Unresolved,0
Saturday September 7th 2013 10:31 am -04:00,return= time_1-time_2Return is a keyword but you appear to be trying to assign a value to it.  the return keyword does not need the = operator the = operator is only used for variable assignment.  Tryreturn time_1 - time_2instead.  , Resolved,0
Saturday September 7th 2013 10:43 am -04:00,if report_status(scheduled_time estimated_time):  That is not a function definition it probably should be:  def report_status(scheduled_time estimated_time):, Resolved,1
Thursday September 12th 2013 5:51 pm -04:00,Although that we have not been shown error handling yet you should not return errors messages in strings like that but instead return False None or throw an error depending on what the function does. Though you do not have to worry about this yet just assume your input is valid until you are shown how to handle errors properly.In this case the empty string is valid input and should produce the empty string as a result., Resolved,1

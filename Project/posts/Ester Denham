Friday August 23rd 2013 8:23 pm -04:00,It does make the question or the answers difficult to read I hope someone locates a fix for this!, Resolved,0
Friday August 23rd 2013 6:17 pm -04:00,This list is great! I cut and pasted it in a Notepad document. Thanks!, Resolved,0
Monday August 19th 2013 11:13 pm -04:00,Tatyana --Yes that is how I got it to work also. File>New Window>type function definition and return in the new window then saveclick the run in that new window after savingThen the shell restarted and I was able to use the defined function, Resolved,3
Tuesday August 20th 2013 1:28 am -04:00,   I also discovered that if you go to the Menu and select...Options>Configure IDLE Preferences>Keys ...you will have a complete list of all the commands at your disposal no mater what type of computer you are using. You can even create your own here. , Resolved,7
Friday August 23rd 2013 4:48 pm -04:00,I am missing something how do I join this group?,None,2
Monday August 19th 2013 5:56 pm -04:00,This is to check in and inform the instructors that I successfully downloaded and installed Python 3.3.2. I got this as the starting lines in the Python shell:Python 3.3.2 (v3.3.2:d047928ae3f6 May 16 2013 00:03:43) [MSC v.1600 32 bit (Intel)] on win32Type copyright credits or license() for more information.>>> The install also included: Module DocsPython (Command Line)Python ManualsUninstall (of course)My computer is:Hewlett-Packard HP Pavilion dm3 Notebook PCAMD Athlon(tm) NEO Processor L335 1.60 GHz64-bit OSDoes this look right? Or is there a better version for my computer?,None,2
Friday August 23rd 2013 5:03 pm -04:00,Thanks Alexander! :),None,1
Monday August 19th 2013 7:55 pm -04:00,Hello this is Ester and this is my first question ever! :DI was noticing that in the video the instructor draws on the screen a Memory Address ID as x201 x202 etc. Then in the Lecture Summary he typed it out as ID34 ID35 etc. Is the beginning of these IDs arbitrary or do they represent two different types of identification or did I just completely confuse myself? :) Thanks for any help. -Ester, Resolved,0
Friday August 23rd 2013 5:08 pm -04:00,Thanks for the word of caution! I certainly dont want to make someones computer crash! yikes!, Resolved,0
Friday August 23rd 2013 5:12 pm -04:00,yes I am definitely eager to understand what the x was representing especially as apposed to writing ID....Mr. GriesCan you please explain the difference betweenx###andID###????, Resolved,0
Friday August 23rd 2013 8:02 pm -04:00,thank you kindly Etienne you truly understood my confusion. Thanks for the clarification. :) Beautiful name by the way., Resolved,0
Friday August 23rd 2013 5:31 pm -04:00,Θέλω να μάθουν Ελληνικά! Αλλά αυτό δεν πρόκειται να βοηθήσει μου εδώ. Ι χρησιμοποιείται μια μεταφράστρια έτσι θα μπορούσα να πω γεια σας έτσι κι αλλιώς.Έτσι γεια σας! :),None,4
Friday August 23rd 2013 4:30 pm -04:00,Psttt....I find that I hate when I have typos on my websites. I love when people make me aware of them. So I figured I would return the favor. On Quiz 3 of the Variables Lecture the title says Quiz 23HUGSLove you people!, Resolved,0
Friday August 23rd 2013 6:37 pm -04:00,Hello All.This thread is to note for mathematical purposes that when you use int division (//) the returned number will not be rounded up!When you use int division all numbers after the decimal point are simply truncated bringing the number back down to the lasat intiger in the number sequence. In a sense you can always assume that int division will always round down.If it was to round up an equation like 2 // 3 would look as follows:>>> 2 // 3 1 instead of ...>>>2 // 30If it would be rounding up (which it does not) any number with a 5 or higher after the decimal point would cause the return to be rounded up to the next integer higher.In Python:2 / 3 returns 0.6666666666666666 2 // 3  rounds down to return 02 // 3 does NOT round up and return 1Since int division does not produce the intiger higher than the estimated float we can assume that Python does not round up!This may or may not be pertinent to later lessons but as programming usually involves some complex math we may want to keep this in mind., Resolved,0
Friday August 23rd 2013 6:38 pm -04:00,As this is a note more than a inquiry I have posted it as resolved. :) happy programming!, Resolved,0
Tuesday September 10th 2013 8:15 pm -04:00,One thing we want to keep in mind while observing this conformity is that zero is always the starting point in a sequence of numbers according to computer logic. This is because of the binary system always starting with 0 in any number sequence*. The computer sets the first index as 0 then proceeds to index the rest of the string chronologically from there. Then to index the string with the negative integers it uses the following formula to determine the new starting index: -(len(s[:])) The sequence starts at the total negated number of units which are in the string then it continues to index the rest of the string chronologically until it runs out of string units which always ends with -1. (besides there is no such thing as negative zero. ;) Remember however that zero is only used to refer to the first positive index position._____________________________________________________________*As you may know binary (as a 2-base numbering system) has 2 digits 0 and 1. 0 is translated as off and 1 translates as on. Before you start your computer your computer is off. When you start it the computer first hears only one command. 1 or on. That command of course then is the catalyst to several sets of instructions. The computer knows what order to run these programs because they are chronologically organized using binary numbers such as 0 1 01 10 11 000 001 010 011 100 101 110 111 etc. As you can see zero is extremely important for the computer to be able to function. Zero is its starting point in any program sequence. So when Python calls a string to be indexed the computer naturally starts with zero., Unresolved,-1
Tuesday September 10th 2013 6:40 pm -04:00,Another way to think about this is time on a seconds only clock where the clock represents a string with 60 indexed units. Notice  below that the space between 60 and 1 is equivalent to string index zero. If each second was an int and each millisecond was the numbers after a floating decimal point You might see a float like 0.5 or 0.8 before the second hand reached 1. This is because computers always count up from zero.(the only true language of a computer is 0 and 1 you know this as the  2-base or binary system which always starts in the off position or 0. )  Right click and select open image in new tab to enlarge.As you can see here range1 contains the spaces associated with indexes 0 1 2 3 4 5 6 7 8 9 10 11 12 13 & 14 but when referring to how may seconds have passed we dont say 14 seconds have passed. After all the second hand is on the 15! This is because we dont usually think of that first second on the clock as the zero second. The convention in the industry in an effort to stay true to computer logic is to always remember that zero comes before 1 in any sequence. Ok so that explains why we start with zero. But why use an extra number on the end if 0 through 14 is a total of 15 digits? Why not say just 0:14 to represent this range? Well we are used to the way it looks on a clock. We are used to 1 being the starting number in a sequence. For our convenience we refer to the range in programming language with overlapping numbers so we dont loose our place in the sequence. Thus ranges  with index 0 through 14 is referred to as 0 through 15 ranges with index 15 through 29 is referred to as 15 through 30 etc. In a clock with a minute hand we would say 15 minutes past or 10 minutes till. It is no different with slicing strings. When programming we choose a range of integers that represents the part of the string we want. If we wanted the next range in the string say  indexes 15 through 29 like in range2 above we say [15:30]. The numbers may overlap with range1 being [0:15] and range3 being [30:45]. The computer has been told by the language designers (i.e. Python designers) that this last number is purely a reference to the range we want. Thus we can use the following equation without an overlap error:>>>clock_time = c[0:15] + c[15:30] + c[30:45] + c[45:](where c is a string represented by all the seconds on a second only clock)Note: We still start with zero while writing programs so the computer knows what index to start with. , Resolved,1
Tuesday September 10th 2013 7:41 pm -04:00,Also note when dealing with negative indexes simply flip the clock on its Y axis (flip the clock vertically) and place a - before each number.  The negative sequence in clock_time would start at -60 because it uses this formula to calculate the starting number: -(len(c[:])) As all 60 units are then indexed from this number the sequence ends at -1. (besides there is no such thing as negative zero. ;) Remember however that zero is only used to refer to the first positive index position., Resolved,0

Monday August 19th 2013 3:50 pm -04:00,just to be clear: id(...)    id(object) -> integer        Return the identity of an object.  This is guaranteed to be unique among    simultaneously existing objects.  (Hint: its the objects memory address.), Resolved,1
Monday August 19th 2013 3:46 pm -04:00,Yes I agree Y stays assigned to the memory address of value 6 because it has not been evaluated again after X has been assigned the memory address of value 10.   , Resolved,1
Thursday August 29th 2013 7:08 pm -04:00,I wanted to share some python documentation specific to indentation.   When I first started coding in Python I ran into these same sorts of errors.http://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation, Unresolved,0
Thursday August 29th 2013 7:01 pm -04:00,Actually it does not matter to Python whether you include spaces between/around operands or delimiters (like commas).   I think its is just a personal choice that the code is easier to read with the spacing.     Ive tended to leave the spacing out I guess a reflection of my own laziness Well I now see the TAs reference to PEP 8 which by the way is a general recommendation and not a functional requirement.    I suppose it is preferable to conform to the recommended conventions that are detailed in the Python documentation. , Resolved,0
Thursday August 29th 2013 6:58 pm -04:00,I get correct when entering (str) -> int as a response. the return will always be an int because a count result is always a whole positive integer.  (there would never be 0.5  or 0.2 vowels in a word), Unresolved,0
Thursday August 29th 2013 6:13 pm -04:00,After you run the module containing your area function did you try typing help(area)?  If the module is successfully running you should see your doc string in response to a help() call. , Unresolved,0
Thursday August 29th 2013 6:11 pm -04:00,hmmm there may be some issues with the PC on which youre running IDLE.  Sometimes if there is a high level of resource utilization these help pop ups are either extremely slow to appear or do not appear as expected.  You may want to look at the performance tab of Task Manager (if on a Windows system) and see how much memory and CPU is being used.   Thats my shot in the dark... hope its helpful. , Unresolved,0
Thursday August 29th 2013 2:01 am -04:00,Print simply displays a value.  When a print command is executed there is no change in what value(s) objects are pointing to.Return passes(or assigns a memory address to) a pointer to the value of the evaluated expression much like when a value is assigned to a variable. Print displays but effects no change in what values are being referencedReturn effects a change in the value that a given object is pointing to, Resolved,1
Thursday August 29th 2013 8:27 pm -04:00,you can find out here: http://wiki.python.org/moin/Python2orPython3, Resolved,0
Thursday August 29th 2013 8:25 pm -04:00,something else that may be helpful is that you can switch between two types of video playback.   On the video lectures page directly under the title Video Lectures youll see a sentence like this Having trouble viewing lectures? Try changing players. Your current player format is flash. Change to html5   you can toggle between html5 and flash video playback.  I use Chrome and personally have better luck with the flash format  html5 frequently pauses and streaks while playing., Resolved,0
Friday August 30th 2013 10:34 am -04:00,I would agree there are three variables in the stack pointing to three memory addresses in the heap, Unresolved,0
Thursday August 29th 2013 7:06 pm -04:00,Him I wanted to give you a link to some python documentation that I believe will help you understand indentation betterhttp://www.python.org/dev/peps/pep-0257/#handling-docstring-indentationeven one space variance in indentation can result in the error you received., Unresolved,0
Thursday August 29th 2013 6:50 pm -04:00,Hello HimYour code looks ok but you have not consistently indented the docstring and body as is expected by Python.   Here is how I would type itdef convert_to_celsius(fahrenheit):         (number) -> float    Return the degrees celsius equivalent to fahrenheit degrees.    >>> convert_to_celsius(32)    0.0    >>> convert_to_celsius(212)    100.0        return (fahrenheit - 32) * 5 / 9print(convert_to_celsius(80) end= )print(convert_to_celsius(78.8) end= and )print(convert_to_celsius(10.4) end= Celsius.)When this is saved and run module selected the result in the python shell (for me) is:>>> 26.666666666666668 26.0 and -12.0 Celsius.>>> , Unresolved,1
Thursday August 29th 2013 6:36 pm -04:00,The split screen youre referring to is actually two separate windows the left (in the video) is the python shell  (or IDLE) and the Right is a new python window (to open a new window select File -> New Window - or hit Ctrl-N)   You cannot execute code in the open window but you can define functions include type contract description examples and code body so that it can be saved as a module.  These files must be saved with a .py extention.   Once youve completed typing out the functions save this file and then select Run-> Run Module (or hit F5)  from the menu of the same window.  In the python shell youll see >>> ================================ RESTART ================================and then a >>> prompt indicating that the module is now running (and all functions contained in the module are now available in the shell).  Until you save the file and run the module the shell will not recognize the function offer any pop up help or return docstring from a help() call.     I hope I worded this clearly enough. , Resolved,6
Thursday August 29th 2013 2:15 am -04:00,This is very unusual.  I have tested this same code a few times and cannot replicate what youre seeing.   I get memory addresses that point to the value.    Maybe there was an issue on the particular day you were using the visualizer.  I have no other ideas why you would see this. , Resolved,0
Thursday August 29th 2013 8:14 pm -04:00,The best way I can answer your questions is to walk through the full step by step visualization of this codesteps 1 to 3 - a stack frame is opened and two global variables that are named sqaure_return and square_print are included and assigned the respective memory addresses where each of the complete function data is stored (name parameters doc string examples and code are all stored at this memory address)step 4 opens a new stack frame where square_return is called (the expression on line 7 sets the expression square_return(4) equal to a new variable named answer_return  so first the right hand side is evaluated... step four opens the second stack frame and includes the global variable square_return - still pointing to the address where the full def is stored - and num which is pointed at an address where the value of the int 4 is stored (this is now how 4 becomes the argument which is set to the parameter num).   and then step 5 opens a new variable in the second stack frame called return value and points it at the address where the value 16 is stored. step 6 completes the function call and adds a new variable answer_return to the initial stackframe the second stackframe all its variables and assignments are now gone from memory as the variable answer_return now points to the value of 16 (which is the function square_return with with argument 4 fully evaluated).    So you see the right side of that expression is fully evaluated in the second stack frame but when that evaluation is complete the second stack frame is removed and the returned value is assigned to the new variable answer_return (well the memory address where the value 16 is assigned to it). note: The variable answer_return  has a memory address of a value 16 because the function that was called in the right hand side of the declaration/initiation of this variable returns a value. stepping through up to step 8 you see the second stack frame opened and the num variable included which points at the value 4 again as the right hand side of the expression on line 8 calls the function square_print and passes the value 4 into it as argument (num opened and pointed at 4) and  then the print command executes so that the console displays The square of num is  16 but in the Return Value variable of the second stack frame is pointing at a memory address where None is stored.  This is because the body of function square_print does not return an object in the evaluation of the function.   So when you move to step 9 the new variable answer_print has a memory address assigned to it where None is stored.  and the final step of this code results in a type error because you are attempting to take a None object and multiply it by an Int  adding answer_print into the final print command does not recall the function with argument 4 again it treats answer_print as a None type object and the result is TypeError: unsupported operand type(s) for *: NoneType and intfor example if you were to edit that line and replace it with print(square_return(4)*5) the value 80 would be printed in the console but any function that does not return a value will always be assigned to a None object when evaluated and consequentially it cannot be used included in evaluation with an expression that includes other value types (like INT in this case).to answer the question you ask in 3 the value that square_print is pointing to is None not because of the use of both a str and int object.  It is none because there is no return command.   The only command that is executed by python in the evaluation of square_print is print which displays the concatenation of the str and  the int which is num**2.  num is only a variable while the square_print function is being executed in the second stack frame once that is complete the second stack frame and all its variables are removed from memory.   so you are left with a pointer to a None object.   the error is a result of trying to multiply a None object with an int value these are incompatible types of objects. , Unresolved,0
Thursday August 29th 2013 2:17 am -04:00,maybe if you specify the problem or at least provide a similar example it would be easier to give some sort of direction. , Unresolved,0
Thursday August 29th 2013 2:48 am -04:00,it is extremely important to have a basic understanding of how memory is utilized as your code is stepped through because there is a static amount of memory available in any system on which the code is executed.   As you begin to write more sophisticated code you will run into situations where your PCs performance will become sluggish if memory utilization isnt economized within the code.    at this stage it may seem unimportant but  very soon it will become clear that it is crucial to keep system resource efficiency in mind when writing code, Resolved,1
Thursday August 29th 2013 2:23 am -04:00,I am a little confused.  I do not find a link to Amazon within the first assignment. The assignment document provides a very sequential direction/instruction and the doc string/examples are all provided in the source code.    How would you suggest this be better organized?, Unresolved,7
Thursday August 29th 2013 3:26 am -04:00,I have to mention again how there are concepts that are covered in these early sessions that seem to be unimportant but they are extremely important to grasp if you want to get to a point where youre writing more sophisticated code.    I really like their use of the python visualizer it sure clarifies the relationship between stack and heap memory and how once a function call is complete it is removed from memory and only the assignments that resulted from the functions return remains.   I know how crucial it is going to be to fully understand these concepts in the very near future. , Unresolved,4
Thursday August 29th 2013 8:36 pm -04:00,the net effect in memory is no different once the function is called with an argument.   In the first example while the function is being evaluated there are two variables created in the second stack frame both pointing to the same memory address but after the return is executed the result variable is removed from memory.    In the second example there is no second result variable ever created so less stack memory is utilized.   However because the difference is in stack memory the difference is of little if not any impact. , Resolved,0
Saturday September 14th 2013 10:58 am -04:00,the autograder keeps failing three of my examples for Insert_SequenceMethod Description:Have you tested your function where you insert at the beginning of dna1?Message:FAILURE: AssertionErrorNone != ATTACGAG : Have you tested your function where you insert at the beginning of dna1?The answer is Yes Ive tested many variations and included several variations in my doc stringMethod Description:Have you tested your function where you insert at the end of dna1?Message:FAILURE: AssertionErrorNone != TACGAGAT : Have you tested your function where you insert at the end of dna1?Again the answer is yes Ive tested many many variations and submitted my code with variations of this scenario in my doc string.Method Description:Have you tested your function on the example in the handout?Message:FAILURE: AssertionErrorNone != CCATGG : Have you tested your function on the example in the handout?finally  yes!  Ive included the example directly from the handout in the docstring of the code that I have submitted. Ive tested this code rigorously but these failures continue when I submit the code., Unresolved,0
Sunday September 15th 2013 12:52 pm -04:00,absolutely      Here are the examples youve provided tested against my code>>> insert_sequence(AAAA CC 4)AAAACC>>> insert_sequence(AAAA CC 0)CCAAAA>>> , Unresolved,0
Sunday September 15th 2013 12:58 pm -04:00,I have a print(result) then return result  expression., Unresolved,0
Sunday September 15th 2013 3:20 pm -04:00,I have removed the print() expression.   I still get the same results., Unresolved,0
Sunday September 15th 2013 3:23 pm -04:00,disregard the autograder took a few more minutes to update.   I finally got a 24/24!!!  Whew!  thanks for the help Tom!, Unresolved,0
Monday September 16th 2013 4:46 pm -04:00,Hola Salvadormi español no es bueno. pero voy a tratar de ayudar.en lugar de utilizar las declaraciones equivalentes multilple para usted Is_valid_Sequence pruebe a utilizar una declaración in. por ejemplo:  if char in ATCG, Unresolved,0
Monday September 16th 2013 1:19 pm -04:00,Hey guys thanks for the help I see now that the answer is evident in the autograder feedback.    One of those things that was right in  front of me but I didnt see it. , Unresolved,0

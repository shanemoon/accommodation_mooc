Tuesday September 10th 2013 6:13 am -04:00,I did also regarded as a fact that an empty dna is not valid.Therefore I got two failures one in is_valid_sequence and one in get_complementary_sequence which calls the first one.I deleted the empty check so that it takes it as valid and waiting one hour now to submit the new file.Ill tell you the results., Resolved,2
Tuesday September 10th 2013 8:20 am -04:00,Ok now its done. There is no need to check for empty sequences., Resolved,1
Tuesday September 24th 2013 6:28 pm -04:00,Did you check what len(board) gives you? It is a list of list. When calling len(board) it gives you actually the number of rows in this case. To get the number of columns you can just call len(board[0]) or len(board[1]) etc. It is kind of tricky but what this does is that it computes the length of any row (every row is a single list) which represents in the board the number of columns.So just replace len(board[0]) instead of len(board) and the rest code you created is fine!, Resolved,17
Tuesday September 24th 2013 6:42 pm -04:00,What is your for-loop range and your check expression in if-statement inside the loop?, Resolved,0
Wednesday September 25th 2013 2:21 am -04:00,I think there are too many for loops and maybe this is the reason you get double counts.You dont need to take the code from board_contains_word just call this function as a checking expression in an if-statement. Thats the notion of re-use. Only one loop over the list of words is needed then checking in every loop if words[i] is contained in the board (via the function board_contains_word)., Resolved,0
Wednesday September 25th 2013 3:22 am -04:00,Propably there is a problem in defining board_contains_word function which ultimately has to do with both corresponding column and row functions. Have you tested them ?, Resolved,0
Wednesday September 25th 2013 5:06 pm -04:00,For example suppose you have a table1 (board) and a table2 (words) then you follow the steps:1) create a counter initially set to zero2) then create a for loop with an i variable from 0 until the length of the table2.   the loop should contain an if statement checking whether board_contains_word(table1 table2[i])   if this is true then you just increase counter by one else do nothing just let the loop finish until its end.3) finally after the loop you return the counterIs that clear now?, Resolved,3
Tuesday September 24th 2013 6:34 pm -04:00,Alex you dont have to use make_str_from_row or make_str_from_column in this function (num_words_on_board).You can re-use just the function board_contains_word into the for loop and you are done., Unresolved,0
Tuesday September 24th 2013 6:40 pm -04:00,See this thread about board_contains_word_in_columnhttps://class.coursera.org/programming1-002/forum/thread?thread_id=2512, Unresolved,0
Tuesday September 24th 2013 6:22 pm -04:00,Its very simple. You update the second element of [str int] list (referencing to its index i.e. player_info[1]) by adding the score of a found word (which is simply a call to function word_score). Its just one line code. And of course as it returns NoneType namely nothing at all you dont need to write the command return just the one line code., Resolved,7
Wednesday September 25th 2013 2:27 am -04:00,If it doesnt increase some of the problems may be:1) you dont do the appropriate updateFor example if the list is players your update code should be of type:players[1] = players[1] + the score of the word (calling word_score function)2) you havent constructed word_score function right., Resolved,4
Wednesday September 25th 2013 6:37 am -04:00,An update command is for example i=i+1.Similarly in this case an update is players[1] = players[1] + something (which is actually the score of the word).Dont search for a command like update. What I meant was this idea., Resolved,0
Tuesday September 24th 2013 6:49 pm -04:00,board_contains_word_in_row(board word) and board_contains_word_in_column(board word) both return a boolean value.You are trying to compare (==) an str (word) with a boolean value.It is more simple.One way is to have a boolean variable say check. Then create an if statement saying that if board_contains_word_in_row(board word) or board_contains_word_in_column(board word)then make check True. And finally you return the check variable.Another way is not even use a variable but instead just in the return line code return this OR expression., Unresolved,4
Wednesday September 25th 2013 12:11 pm -04:00,Sorry I did it the last way in one line not checking the other way. I forgot to say that into the if statement of the for-loop when you find a word (namely when either board_contains_word_in_row or board_contains_word_in_column become true) then of course you make check=true but afterwards you have to tell the loop to stop (that is done by simply adding immediately after check=true in the next line the command break (this stops immediately the loop).If you try the simple way (which I suggest you) its just one line code. You say return...... followed by the OR expression. There is no need for loop here.Make sure generally that both functions ( board_contains_word_in_row   and board_contains_word_in_column ) work fine and return boolean values., Unresolved,2
Wednesday September 25th 2013 2:32 am -04:00,See this thread:https://class.coursera.org/programming1-002/forum/thread?thread_id=2512, Resolved,0
Wednesday September 25th 2013 2:37 am -04:00,I had the same problem initially.Omit open commands from a3.py. They are done in a3_driver.py., Unresolved,1
Wednesday September 25th 2013 2:43 am -04:00,did you change anything to a3_driver.py? , Unresolved,0
Wednesday September 25th 2013 3:23 am -04:00,What errors did you get after the submission?, Unresolved,0
Wednesday September 25th 2013 5:31 am -04:00,Thats why I asked him if he changed for example a3_driver.py by adding print commands or even in the a3.py., Unresolved,0
Wednesday September 25th 2013 6:34 am -04:00,Omit open commands from a3.py and run it again., Unresolved,1
Wednesday September 25th 2013 12:01 pm -04:00,Ajith something is wrong with your indexes.In your make_str_from_column function do the following:1) Initially the string word you created as a variable must be empty ( )2)Then use only one for-loop (range until the length of the board) where you add to this string word the word plus the [i-th][column_index] item of board.3) Finally outside the for-loop return the word.Is that clear now?, Unresolved,0
Wednesday September 25th 2013 6:39 am -04:00,See the following thread for changing your range:https://class.coursera.org/programming1-002/forum/thread?thread_id=2512, Unresolved,0
Wednesday September 25th 2013 7:56 am -04:00,Dennis omit the first line of opening.And even better insert into append the line.rstrip() instead of defining it separately as a variable newline., Unresolved,0
Thursday September 26th 2013 7:20 am -04:00,Pat instead of adding the item (which is just an index) you should add the letter of the board that exists in a specific position (which includes this index). Namely you need to add   board[row_index][item]  instead of item. Your rest code is fine. Test it, Unresolved,4
Monday September 30th 2013 8:34 am -04:00, word_count = 0    for word in range(len(words)):        if words in board_contains_word_in_row(board word):            word_count = word_count + 1    return word_countDo the following:1) Delete words in after if. Board_contains_word_in_row returns a boolean not a list.2) Either:    Change word to words[word] into board_contains_word_in_row. In your code word represents an index and function board_contains_word_in_row needs a word istead of an index as its second argument.   Or:   You can leave board_contains_word_in_row as it is and instead use word as a word and not an index. In this case you need to change your for range into:      for word in words, Unresolved,1
Tuesday October 1st 2013 6:16 am -04:00,Did you check that word_score returns the appropriate values?, Unresolved,0

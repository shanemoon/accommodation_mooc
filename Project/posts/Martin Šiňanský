Monday August 19th 2013 2:36 pm -04:00,guys... basic calculus says that the solve order is 1. what ever is in the parentheses2. exponentiation3. multiplication/division4. addition/subtractionthe quiz asks you to evaluate in order + - / so all you need to do is make sure that the correct symbols are in parentheses... There is absolutely no need to move the numbers around..., Resolved,4
Monday September 2nd 2013 8:58 am -04:00,Guys do not get frustrated. This course is so far taking just baby steps. I can compare it to two other programming courses I have attempted and I have only succeeded in one of them (MIT 6.00X which dealt with same concepts). All that is needed here so far is some basic logic and calculus.All you need to understand is that a program is like a child. If you want it to do something you need to tell it clearly task by task (step by step) in specific. You can not just say go there and take something (well you technically could do that with random choices but that is a completely different topic). You need to define where THERE is and what is the SOMETHING you want and what TAKE means. think of it as a recipe that tells you that to get an omelet you need to do this:.... Same concept different scope. Just relax and if you feel lost try to explain your task/logic/concept/whatever to a child... ;o]]],None,2
Wednesday September 4th 2013 8:11 am -04:00,Well in a previous course I have learnt a neat trick called pseudo code... when you brainstorm and think about what you need done you can do this either on paper or directly in your code editor... just use comments for it. It is an algorithm written in understandable language sketching the process following the rules of indentation... so for example if you want to count number of even numbers in a given list of numbers you would do something like this...def count_even(num_list):...fill in your doc string...    # create variable even_count and set it to 0    # for every member of num_list        # check if member is divisible by 2            # if yes increase even_count by 1        # else:            # skip to next member        # return even_countWe will learn loops and flow control a bit later but the logic is the same. The empty lines are there as a space for your code so you can easily follow the structure... you just need to follow the pseudo code line by line...As I said you can do it on paper or in text editor but this can help you get your mind around the problem more easily...,None,4
Monday September 2nd 2013 7:14 am -04:00,!= in python means not equal. We will use it later in loops for example. so the graders message simply means that while one result was expected the other was returned. It would be cool if the grader mentioned the test case so we could double check the logic behind. I have same error for student: test_get_hours.TestGetHours.test_large_input. It simply states assertion error 9 != 105. Well and saying 9 is not equal to 105 means some serious discrepancy in the calculation.For this case I have quickly created a factorial function to test some ridiculously large number and I still had correct results in IDLE compared with calculator. I even went further and created a list of a couple random numbers in excel in column A [= rand()*10000000] and in the column B I did the match [=int(@A/3600)]... guess what... results were correct even in cases like get_hours(7777689)... 2160 by the way ...On the other hand this is the only case where I get a failure status so I am not so concerned by the result, Resolved,0
Tuesday September 3rd 2013 3:14 pm -04:00,Jose that is exactly the answer. If you create variables and function in shell and then you load a module ( by pressing F5 in the module) you reset your shell. That means you erase all you had in memory and replace it with basic inbuilt functions and the functions defined in your module.So as mentioned before modules are there to make sure you do not lose your work. You can test as much as you want in shell but when you are sure you have the correct answer copy it over to the module (a1.py) in this case. Save the module and afterwards if you reload all your completed function will be available..., Unresolved,0
Tuesday September 3rd 2013 4:20 am -04:00,As Paul already mentioned frames have a thin grey line on their left one continuous line over several items still means you have these items in one frame... and since the main program counts as a frame the answer should be quite simple...;o]]], Resolved,9
Tuesday September 3rd 2013 3:09 am -04:00,thanks to this post I realized that I havent read the assignment properly... ;o] Will need to focus on wording much more in the future... I have also thought just to evaluate how many hours passed from a start... not to place it within 24 hr range...Now I am one of those who reached 42/41... ;o]]], Unresolved,0
Tuesday September 3rd 2013 8:06 am -04:00,it is the quirk of a print statement in python. If you store a string in a variable like something = some text goes here and you call the variable from shell you get back your string with quotes like this:>>> somethingsome text goes herebut when you print it you get a plain text like this:>>> print(something)some text goes here I think that the print method is meant for GUI mainly where you probably would not want to have quote marks around everything hat gets printed... And besides in shell the print statement is pretty useless, Resolved,3
Wednesday September 4th 2013 5:22 am -04:00,There are still some nice possibilities I have seen in the past couple of months. Like NinjaIDE (written for python and in python) Aptana Studio works OK there are plugins for Visual studio and there also is pyscripter that worked pretty well for me on Windows Vista but who knows why it does not want to initialize properly on win 7..., Resolved,0
Monday September 23rd 2013 8:52 am -04:00,Chris If you want more challenge I suggest MIT6.00x on edx.org. It is a full course and covers more material. Though I have no idea when the next one will start but you can add it to a watchlist for later..., Resolved,1
Tuesday September 17th 2013 7:01 am -04:00,Donna in this case it would probably be the best to open a new module and debug the code you work on there. You can set up your variables in it too so that when you restart the shell these variables get reinitialized too. And after you have your code debugged copy the clean code without the variables over to the original module.It is not like you can not have more than just one module opened at a time. And if you need full functionality of the original module (functions already defined and debugged) just add an import statement in your debugger module...like:from original module name  import *def debugged_function():    .....var1 = ...var2 = ...var3 = ...This way you have all the correctly running functions at hand same variables reinitialized for the tests and you can change the code for the debugged function without compromising your original module as many times as you need..., Resolved,1
Tuesday September 10th 2013 1:10 am -04:00,Should have tried MIT 6.00x on EDx then. It was longer with more details in some cases and full of examples and assignments ranging from ciphers gambling probability through bio-statistics up to a simple robot programming. It got pretty difficult towards he end when it reached object oriented programming and graphical visualisation..., Unresolved,0
Tuesday September 10th 2013 7:30 am -04:00,Well assignment is not really asking for this...so no need to verify. If this was a real world scenario (or at least bit more advanced course) you would have had to define one more final function that would combine all these small functions into a meaningful program... like get_complementary_string()  could do all the necessary steps within its bodyFirst check if the string is actually valid (and you have already created that function) then get complements (and yes you have done that one too)... ;o]]]Like this the code is not looking for all the proper methods for error handling. It is jut a set of exercises to check if you understood single concepts from the videos of last two weeks..., Unresolved,0
Tuesday September 10th 2013 7:35 am -04:00,Steve it is quite easy... just type return enter your boolean check here (like x>=20), Resolved,0
Wednesday September 11th 2013 7:26 am -04:00,Artyom  I have not even thought about it and used a dictionary. Just later have I realized that dictionaries were not covered in this course..;o]]] But the solution was short elegant and valid for the grader so no issue... ;o]]], Unresolved,0
Wednesday September 11th 2013 8:03 am -04:00,Of course there are more ways to do this but I have to say that dictionaries are more elegant in the end. Plus use while loop together with for and you have a 4 line code that stops at the first invalid nucleotide instead of looping through the whole sequence even when it encounters invalid nucleotide in the beginning...., Unresolved,0
Wednesday September 11th 2013 6:34 am -04:00,do not iterate over the function just over the dna sequence like this for char in dna:    do some obscure test to see if the character is validWell and it is up to you how you set up you validity test. hint - a string only containing valid characters might help..., Resolved,0
Wednesday September 11th 2013 6:51 am -04:00,Philip slicing is not considered a method. The lecture explicitly explained that methods are those that come after period... like str.find() str.split()... in this case you need concatenation of strings which is an operation on string segments (before index after index and the addition)...as Anonymous mentioned one line of code is sufficient for this...All you need to remember is the rule of slicing str[xy] means take the part of the string starting at and including x and ending at but excluding y, Unresolved,1
Wednesday September 11th 2013 6:43 am -04:00,Anonymous technically you can do without if else but it would make your work more complicated. You need to realize that this is a check with two possible outputs. That automatically means you have to put a decision somewhere in your code. On the other hand a correct use of if can help you shorten the run of the program itself. Imagine a sequence with tens of nucleotides where there is one invalid entry somewhere around 20th position. Correct use of if can stop your loop from running further than the one faulty entry... That means that you can tell your program to run until it runs into the first invalid entry and automatically tag the sequence as invalid or until it reaches the end of the sequence in which case the sequence is valid., Resolved,1
Friday September 13th 2013 8:28 am -04:00,I am planning to take the Interactive this October. That is why I am taking this course as a refresher. I have taken the MIT 6.00x (python 2) this spring on edx and I have to say it was much more complicated than this. It was also oriented at beginners with no experience in programming and covered several topics. They went pretty fast through basics and focused more on methodology of specific algorithms (sort and search greedy algorithm Monte Carlo simulation and so on...) and ended in OOP and generating charts. They pushed for code efficiency and did not take code that took too long to come upon a correct answer. ,None,0
Friday September 13th 2013 10:29 am -04:00,yeah the grader is looking for get_complementary_sequence() which you do not have defined in your code... that is why is says ReplacerModule object has no attribute get_complementary_sequence. Correct spelling and case is important in python and it has already been highlighted in previous videos...fix that typo and you should reach the full marks..., Resolved,0
Friday September 13th 2013 8:11 am -04:00,Allison I have one thing to add I have noticed. You have mentioned that  it doesnt even return any >>> That can usually mean two things: 1.) that your code is really long an it needs a lot of time to evaluate or 2.) you have not closed your loop properly and it running in the infinite loop This should be easy to spot and correct at this level. However it can cause some trouble with more complicated code... Trust me you will learn to write effective code when the grader has a time limit for evaluation of a submission and even though your code returns results in IDLE it would be graded wrong by automatic tester... That was the bane of me in previous MOOC I tried... ;o], Resolved,0
Friday September 13th 2013 7:57 am -04:00,Precisely as anonymous said You do not need to return result within the loop just after your loop is done.. in your case you have declared variable result as True. So in your loop if your expression evaluates to True you can simply skip to another character by using pass like this:if char not in non_valid and dna.isupper():    passelse:    # what ever else you want to put here (hint: change your variable)...This way the loop will simply skip to next character until it evaluates to False. After your loop is completed you can add your return ...However if I may suggest change your logic to something more straight forward and simple. You know that in actuality only 4 characters are valid. So instead of declaring invalid characters simply declare valid ones (valid = ACGT) and simply check if your character is valid. If you do that no dna.isuper() will be needed..., Unresolved,0
Tuesday September 17th 2013 10:12 am -04:00,SK: nemas zaco Anton ale ked mozem navrhnut aj ked rozumiem cestine pouzivaj anglictinu vo fore... patri to k etikete na medzinarodnych forach.... ;o]]]... mozes nahodou zdielat informacie ktore by mohli pomoct niekomu kto tvojmu jazyku nerozumie...EN: youre welcome Anton but if I can suggest even though I understand Czech use English on the forum... it is considered common courtesy in international forums... ;o]]]... You might share some information that could be helpful to someone else who does not speak your language...and for those who do not read Czech in this case Anton just said Thank you Martin! Now I get it ;o]]], Unresolved,0
Friday September 13th 2013 9:01 am -04:00,TaghreedI would suggest to slow down a little and to really think about what you need to do. You do not need to replace anything. You get a string of characters (nucleotides) that are assumed to be valid and you need to return another string that would be complementary to the original. You have a function get_complement that takes one nucleotide as an input and returns one complementary nucleotide... Now you need a string. So the answer is rather simple Loop through your original string to look  for each complement. Keep a record of these returned characters and in the end return the recorded string. in short use a for loop to get_complement() for each character in your given DNA string..., Unresolved,0
Tuesday September 17th 2013 8:20 am -04:00,Rachel clean boolean method is possible but it is best implemented with methods from week 5 like while loop or lists... you could1. set check = True then do a while check ==  True: loop over the sequence and when you encounter invalid character change check to False... or2. use a list like results =  and iterate over the sequence check if teh nucleotides are valid and append the return value to the list. In the end you could simply type return not False in results...But while loop would be better because it breaks the code at the moment it hits the first invalid character in sequence which is more cost effective, Unresolved,1
Tuesday September 17th 2013 9:09 am -04:00,Anneif you use return within the for loop like:for i in dna:    if i in valid:        return True...your loop will exit after the first character is checked because return is an escape statement. That means that as soon as the code line with return on it executes it exits out from the function and continues on the higher level (call stack). You only need to include it once in your function definition (ok you could use it more times if you have it within if clauses). So what you need in the end is some kind of tracker of the character validity a loop that updates the tracker and the return after the loop. the keyword break that someone above has mentioned already can help. Since you can break the loop as soon as you encounter invalid character..., Unresolved,1
Sunday September 15th 2013 4:15 am -04:00,Vincente you absolutely do not need to store the slices in separate variables. This takes up unnecessary memory and takes an extra step to calculate... you could directly use [~ep], Unresolved,0
Sunday September 15th 2013 4:22 am -04:00,Ashwini I did the same thing definition and return statement. The rest gets taken of by built in string methods...Vincente just try this in IDLE:dna1 = AAAdna1[3]If I remember correctly you should get an error message stating that there is no such thing as dna1[3] back (can not test now to give you precise wording of the error as I do not have python installed on this PC). So if you use  index that is too large in your insert_sequnce() your code would return an error and I believe that is what the tester is looking for., Unresolved,0
Sunday September 15th 2013 4:29 am -04:00,Ohad that is a nice idea simple and envelopes what we have already learned. Funny I did not think of it. There si another method that was already discussed in several threads that I have used but it has not been covered by the lectures yet. Dictionaries... You just need one line for data setup (create a dictionary with complementary pairs) and one line for return statement to return the specific complement..., Unresolved,1
Tuesday September 17th 2013 10:05 am -04:00,Ohad I know where youre aiming. I did another course before that also had a timer for the grader if your code took too long to evaluate it was graded as wrong even though it ran quite fast in local IDLE... network and server thing... ;o], Unresolved,0
Wednesday September 18th 2013 3:11 am -04:00,William check your cases... Is_valid_sequence is not the same as is_valid_sequence... at least not in python... Your code works in idle because you have built it and you call it as is. However the grader is a program with predefined functions it is looking for in your code... so whenever you see that little frame with variable name like is_valid_sequence you should make sure that you copy it verbatim into your code (best do a C+P). This solves a lot of confusion in the end., Resolved,0
Tuesday September 17th 2013 8:10 am -04:00,Plus as I see the indentation here it would not give the result you have received but only the last character... It seem that your code included the return statement in the for loop...To help shorten the code a little python know expression x += 1 which in general can replace x = x + 1 . Yes in term of variables like x it does not make much sense but when you need a collector like count_valid_characters it starts to come in handy... ;o], Unresolved,0
Tuesday September 17th 2013 7:59 am -04:00,Guys You have to remember one thing. dna1 and dna2 are strings. Mathematical operators for type str have different functions than for type num. It was already mentioned in the lectures... for string < > compare alphabetical order not value as strings do not have values... , Unresolved,0
Thursday September 19th 2013 8:09 am -04:00,Guys no more than three means precisely one thing. In math it would be an inclusive interval of zero to tree . So what the code needs to do is check for every member of the list if number of occurrence is <=3. If yes nothing needs to be done if not you need to remove the excess occurrences until the condition is met. So if in your original playlist Lola was entered 5 times you need to remove two Lolas to get the maximum number allowed (3)..., Unresolved,1
Friday September 27th 2013 2:39 pm -04:00,Well Oliver I think I cheated it a bit as I could not get rid of  properly so i did a for char in line[:-2]:. Worked like a charm..., Resolved,0
Friday September 27th 2013 2:46 pm -04:00,I had similar issue but in the end A3 FAQ helped a lot... You do not need to open a specific board. You just need a variable in your code. The specific board will be provided by the a3_driver.py... So make sure that you do not try to actually open the file because what you get as an argument is already file loaded into a variable...By the way took me 1.5 hrs from opening the handout and a3.py until submission with full score on the first try... hint. actually trying to play a game with provided files helps in making sure your code works properly..., Unresolved,1
Friday September 27th 2013 2:33 pm -04:00,Ana I had a similar result for a while but that was due to wrong slicing. Your slicing on the other hand is OK so you should really check your word_score() if you havent missed some cases or if you actually return a value instead of printing it..., Unresolved,0
Tuesday October 1st 2013 7:25 am -04:00,I believe that since you have been given a concept of mutability of dictionary values trough reassignment grader is limited to this solution I agree Richard that your code works but it can be done in a simpler way...as mentioned above 8 characters are enough, Resolved,0
Tuesday October 1st 2013 6:50 am -04:00,Plus it was sent to everyone via email... cause I kind of doubt that I was the only one who has received this announcement..., Resolved,14
Tuesday October 1st 2013 7:29 am -04:00,Brad I can definitely agree with you on the Cover page for the final exam... that is something that Coursera can learn from Edx..., Resolved,4
Thursday October 3rd 2013 7:47 am -04:00,see you there three... ;o]Though I still need to do the exam... not much time during the week, Resolved,0
Friday October 4th 2013 2:30 pm -04:00,I took 6.00x some time ago and it was quite challenging but it definitely kick started my mind into thinking about problems in algorithms... break it down separate the steps manipulate it as much as needed and then build it back up to get a result... ;o]]]. I have 6.001x in my sights but since I am starting the Interactive I will keep it for later., Resolved,0

Tuesday September 10th 2013 8:17 pm -04:00,try using a local variable in the function.  It might not be the best way to try assigning values inside of the return statement. If it was shorter it might be easier.  Like we did in class you can assign a local variable-- then when you return the value it might look likereturn hours_floatwhere hours_float is a local variable defined just within your function.Hope i didnt spoil anything!, Resolved,0
Tuesday September 10th 2013 10:20 pm -04:00,The professors said they were going to test with partial (decimal) offsets. There are some timecodes that are -1.5 and such. Depending on where in the world they are located. They said they are going to test all possibles and will test for that-- they stated they PURPOSELY did NOT include those (fractional) offsets with our examples so that they could check for it in grading. If you dont get the right answer for a partial offset your program could be partially incorrect. Id highly suggest checking for it!This was my result (Im guessing it is correct) -- you can check yours:>>> time_to_utc(-1.5 22.0)    23.50, Unresolved,1
Tuesday September 10th 2013 9:45 pm -04:00,for this in shell:time_to_utc(-1.5 22.0)I had 23.5 -- because I thought we were supposed to convert it to base 10 (and often decimal point)I dont know if thats correct., Unresolved,0
Tuesday September 10th 2013 10:15 pm -04:00,however 23.5 is what I had for your statement above and I got everything correct (41/41) in my assignment program...   so I guess its right.  I think youre using base 60 for the clock (and instead using minutes) instead of representing that as a fractional (decimal) amount which is base-10.30 mins = 0.5 hours etc., Unresolved,0
Wednesday September 11th 2013 12:56 am -04:00,No conversion just saying that 90 mins would = 1.5 hours with that rationale.   30 mins doesnt equal 0.30 is all., Unresolved,0
Tuesday September 10th 2013 11:23 pm -04:00,Teresa--  I think we just call the to_24_hour_clock AFTER weve gotten our result from our function... that is our time_to_utc will have that call after it has calculated the time FROM the UTC and what that is... without that function call you are likely to end up with negative time which cannot occur.You can check all your example from what was given to kinda look for the pattern.  I had to do an operational type command because of the fact that there is NO such thing as Negative time!!!  So therefore I had to have a conditional statement that prevented any negative numbers or 0 from messing up my arguments.Heres a link on how to do Logical statements you might find that you need to have a certain case if a number is negative-- and a certain case if a number is 0.  Because you cant use certain commands with 0 especially some operands like % / //    So I made a special case to deal with everything EXCEPT for 0.  I also turned any negative numbers into a positive number.  If you remember we had a command to do this--   abs  (absolute number)Ex.>>>abs(-3.5) 3.5Hope it helps....   Heres a link you might find useful.  Theres more than one way to skin a cat!  ;-)http://www.tutorialspoint.com/python/logical_operators_example.htm , Unresolved,1
Tuesday September 10th 2013 11:29 pm -04:00,Oh to answer your question  the call to_24_hour_clock needs to occur somewhere in your return statement perhaps?  Otherwise you could end up with a number MUCH higher than 24 hours in a day!  Remember that your call to_24_hour_clock turns it into a real 24 hour time...   You might end up with some answers giving you 35 hours or something unless you use a that before or in the return call.I created a couple of local variables  and also made one called a- which I made 0  and made sure that time was <> 0.  Otherwise I made sure I had an absolute time amount and not a negative time... hope it helps guys!If time was negative I did one thing... If time was 0 I did another.  Incidentally time_to_utc and time_from_utc were almost EXACLY the same... I was able to cut and paste almost all of it., Unresolved,0
Tuesday September 10th 2013 11:41 pm -04:00,Check out my above comment it might help you out... also check out this page---  I had to make conditional arguments....  In one case  if time = 0  I did one thing.In another if time was negative I made it positive.   Then I put that value into a local variable called new_time_var -- I used this to store the value from a pattern I noticed.  http://www.tutorialspoint.com/python/logical_operators_example.htm Case 1 (time  is midnight?):You might have to do something if time happens to be 0.. which is obviously not the case.Case 2  (time is negative):  you can use something like absolute command to convert this to a positive number since time is not negative.Then convert that time to regular 24-hour format (not over!) with to_24_hour_clockREMEMBER-- there is always more than one way to skin a cat!!  ;-), Unresolved,1
Wednesday September 11th 2013 12:14 am -04:00,Hint:  One statement of mine looked like this:if not (time and 0):   condition if (time and 0):   abs(time)Though as was stated Im not sure abs was necessary.  I solved it in about 6 steps....  I dont think we actually have covered that.. .though Im in so many programming classes I cant keep straight what weve learned in what class. Apparently there is another way to do this without IF statments.... so that would be best to do since we dont have IF statements yet... sorry I was confused about what class I was in...it is midnight if its zero-- and then theres often mins or seconds left!  So if you notice the examples given work differently if time = 0 so you have to make a case for that.then dont forget to call to_24_hour_clock-- because its not 35 oclock anywhere!  as last statement before return.since you cant have 35 oclock  you have to convert to 24 hour clock...  you also cant have a NEGATIVE clock time except when youre referring to how much extra time you have (NOT!)  you spent it all working on this assignment....Sorry passes for humor..., Unresolved,1
Wednesday September 11th 2013 12:19 am -04:00,See if you can get any of these results that are included with our code that included:    >>> time_from_utc(+0 12.0)    12.0    >>> time_from_utc(+1 12.0)    13.0    >>> time_from_utc(-1 12.0)    11.0    >>> time_from_utc(+6 6.0)    12.0    >>> time_from_utc(-7 6.0)    23.0    >>> time_from_utc(-1 0.0)    23.0    >>> time_from_utc(-1 23.0)    22.0    >>> time_from_utc(+1 23.0)    0.0the first parameter is the UTC code (where the time zone is!)  the 2nd is what time it is there... so you can figure out the pattern as such:-1 UTC and its 23:00 so that means its really UTC (now) 22:00  -- since were just one 1 hr off.  You dont go above 24 for any time-- and time can not be negative., Unresolved,1
Wednesday September 11th 2013 12:41 am -04:00,Did you submit for the proper assignment?  While it is Week 2 it was assignment 1... dont get them mixed up. I accidentally submitted for Assignment 2 for this weeks., Unresolved,0
Tuesday September 10th 2013 11:04 pm -04:00,Latif-  maybe try using local variables inside your functions?  Remember those are variables that are only relevant INSIDE the function. Once you call the return statement they clear their value.  It can make working with operands much easier and might make it less confusing instead of trying to cram everything into one step.  Just logically step thorough the parts one step at a time before trying to move on to the other parts in your program.  It makes it easier to assign a value to a local variable then you can pass that variable in the return.  It makes it less likely that you confuse something and thus makes it easier to track down any possible errors on ones program.for example perhaps this might be a technique that you could use?  Where parameter_variable is something that maybe is called in your function or maybe is an argument-- depending on the use....  Heres a simple example of using a local variable it might make things easier for you perhaps?  You could insert something like this in your function it might make it easier to split apart the steps so you didnt get hung up on any one part... a = 1 + parameter_variableb = get_something(a)                      <--- function call to get_something with the value of a in itreturn b, Resolved,0
Tuesday September 10th 2013 11:53 pm -04:00,Latif -- why do you have 2 modulos and 2 returns in your get_minutes??  You ALMOST have it right... I think if you focus on 3600 seconds in an hour instead of having to % by 36 then // 10.You might put the value of get_minutes into a local variable that only runs inside the function like so (Im going by what you used in your statement Im not saying if thats right or not-- I think theres an easier way to represent that amount but Im showing you this for your benefit-- and since you already had it typed....  )You had 2 return statments in your get_minutes function... obviously once the first one is called the 2nd one wont be called.  So to do what youre trying to do you could use a local (temporary) variable that would represent a statement or calculation or variable into a temporary variable then you can use that to call another function if you like!temp_var = (seconds%3600)//60then try calling function after that using temp_var or whatever name you pick for the local variable...THEN return what you get back from function in the return call., Resolved,0
Tuesday September 10th 2013 11:56 pm -04:00,You cant have 60 seconds in time!  It would then go to 1 min!  So you have to make sure seconds does not exceed 59!3600 seconds in an hour....  so 3800 - 3600 = 200 seconds200 seconds  = 3 whole minutes WITH= 20 seconds left!!!minutes is another step down from hours  60 seconds in a minute 60 seconds in an hour!  So if you simply get the hour amount (by 3600) that does not YET give you the number of minutes... it takes an additional statement..., Resolved,0
Wednesday September 11th 2013 12:02 am -04:00,Check this out... I found out that I had left 2 characters out that gave me about 7 errors.... you can assume that any mistake will be compounded whenever they run the program against it. See what failed and then try to do that....  Remember everything needs to be in exactly EVEN number amounts for hours mins seconds!  Read this forum on how to make sense of the grading:https://class.coursera.org/programming1-002/forum/thread?thread_id=1027 , Resolved,0
Wednesday September 11th 2013 12:06 am -04:00,See if you can test your get_hours get_minutes and get_seconds with this:    >>> get_hours(3800)    1    >>> get_minutes(3800)    3    >>> get_seconds(3800)    20, Resolved,0
Wednesday September 11th 2013 12:08 am -04:00,Great to hear!  My years of programming classes from my computer programming major are coming back!  I got hung up on the easiest stuff but found the difficult things easiest.   I had actually done this program backwards before realizing we had instructions... go figure....   I started with step 5 or 6., Resolved,0
Tuesday September 10th 2013 10:42 pm -04:00,look at the steps below that...  notice the modulo  %   operator.   It can be used to get the remainder from something.  It can be used in one way to get the result you want.Also note what they say about the time:theres 3600 seconds in an hour.   You can use that info to calculate it.  You should be able to test some data and expect a certain result.Dont forget you need to call  to_24_hour_clock and put your result into that when you get done for your get_hours function...---------========--------Look at the steps they told you about the operands of % and //     (they will be used in this step).About the first part of step 5 (take the first step first!)--  :   - if there are 3800 seconds  that means theres 1 hour 3 minutes and 20 seconds....because if you take the number of seconds in an hour away from 3800 youre left with 200.  Get the minutes and its 3 whole minutes with a remainder of 20 seconds....  Read the steps carefully  is the best advice I could give---  dont overthink it!  Its not THAT hard.....  go back and read step 5 from the beginning..  it might help to go back and look at what you did for earlier steps maybe?, Resolved,0
Tuesday September 10th 2013 10:46 pm -04:00,You should be able to run the examples they gave in our assignment one link: http://spark-public.s3.amazonaws.com/programming1/a1/a1.html Step 5 test examples (included in link-page):            For example:                    >>> get_hours(3800)    1    >>> get_minutes(3800)    3    >>> get_seconds(3800)    20            So you know youve got the right result if you come up with those answers.  Its not too hard. Just the even number of hours even number of minutes and even number of seconds (even meaning only focus on that one part at a time-- you can do the hours seconds and minutes independently of each other-- youd know how many extra seconds you had if you were given thousands of seconds--- as well as the minutes and the hours by using the same principle).  Only focus on one thing at a time--- hours then minutes then seconds., Resolved,0

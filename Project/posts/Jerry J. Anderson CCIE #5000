Sunday September 1st 2013 3:19 am -04:00,The docstring pop-up seems a bit flakey in IDLE.  Sometimes it works; sometimes it doesnt.  I havent used it enough yet to catch onto any patterns as to when it does or doesnt.Jerry J. Anderson CCIE #5000, Unresolved,0
Sunday September 1st 2013 2:08 am -04:00,To call a function you simply refer to it by name with any arguments specified inside parentheses.  Here is an example of calling the print function:print(Simple!)If your function has no arguments the parentheses are empty:my_do_nothing_function()If you want to use any value returned by a function often you can simply assign it to a variable:my_string = hex(32)Thank youJerry J. Anderson CCIE #5000, Pinned Resolved,1
Sunday September 1st 2013 2:50 am -04:00,Using the Function Design Recipe taught in the Week 2 video lectures most functions will have five parts: a header a type contract a description examples and a body:def area(base height):                                  Header    (number number) -> number                        Type Contract    Return the area of a triangle with dimensions base   Description    and height.    >>> area(10 5)                                      Examples    25.0        return base * height / 2                             BodyThe type contract description and examples are in a docstring.  The docstring starts and ends with triplets of single quotes () or double quotes ().  The docstring is ignored by Python so the type contract description and examples arent strictly necessary for the function to work.  Theyre just there to help you and the programmer who will someday maintain the code you wrote understand and remember what the function does and how.  All that is really required for Python to work is the header and the body.The functions in the assignment are missing different pieces.  Try fleshing out each function so that each has all five parts (i.e. write the missing parts).  Make sure your docstring is set off with a matching set of beginning and ending triplets of single quotes () or double quotes ().Once you have one or more functions youd like to test start IDLE open your edited a1.py (File -> Open...) and run the module (Run -> Run Module or just press <F5>).  IDLE should restart when you run the module:>>> ================================ RESTART ================================>>> For each function you want to test cut-and-paste each of the examples listed under that function into IDLE:>>> seconds_difference(1800.0 3600.0)1800.0If your output looks like the output in the examples within the function docstring youre well on your way.Good luck!Jerry J. Anderson CCIE #5000, Pinned Resolved,6
Monday September 9th 2013 1:43 pm -04:00,ElenaI cant tell from the information above what might be wrong.  Have you tested your functions with all of the example inputs given in the assignment and did your results match the example results for every test?>>> seconds_difference(1800.0 3600.0)1800.0>>> seconds_difference(3600.0 1800.0)-1800.0>>> seconds_difference(1800.0 2160.0)360.0>>> seconds_difference(1800.0 1800.0)0.0>>> hours_difference(1800.0 3600.0)0.5>>> hours_difference(3600.0 1800.0)-0.5>>> hours_difference(1800.0 2160.0)0.1>>> hours_difference(1800.0 1800.0)0.0>>> to_float_hours(0 15 0)0.25>>> to_float_hours(2 45 9)2.7525>>> to_float_hours(1 0 36)1.01>>> to_24_hour_clock(24)0>>> to_24_hour_clock(48)0>>> to_24_hour_clock(25)1>>> to_24_hour_clock(4)4>>> to_24_hour_clock(28.5)4.5>>> get_hours(3800)1>>> get_minutes(3800)3>>> get_seconds(3800)20>>> time_to_utc(+0 12.0)12.0>>> time_to_utc(+1 12.0)11.0>>> time_to_utc(-1 12.0)13.0>>> time_to_utc(-11 18.0)5.0>>> time_to_utc(-1 0.0)1.0>>> time_to_utc(-1 23.0)0.0>>> time_from_utc(+0 12.0)12.0>>> time_from_utc(+1 12.0)13.0>>> time_from_utc(-1 12.0)11.0>>> time_from_utc(+6 6.0)12.0>>> time_from_utc(-7 6.0)23.0>>> time_from_utc(-1 0.0)23.0>>> time_from_utc(-1 23.0)22.0>>> time_from_utc(+1 23.0)0.0Jerry J. Anderson CCIE #5000, Pinned Resolved,1

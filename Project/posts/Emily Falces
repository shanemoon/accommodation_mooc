Wednesday August 21st 2013 12:00 am -04:00,Lucas sequences are sequences Un(PQ)U_{n}( P Q ) where xn=P∗xn−1−Q∗xn−2x_{n} = P*x_{n-1} - Q*x_{n - 2}.http://en.wikipedia.org/wiki/Lucas_sequenceGive the two base cases this recursive code can produce the nth (n>0) member of Lucas sequences given by Un(1−1)U_{n}( 1 -1 ) where xn=xn−1+Q∗xn−2x_{n} = x_{n-1} + Q*x_{n - 2}.The Fibonacci sequence has base cases x0=0x_{0} = 0 and x1=1x_{1} = 1.def gen_lucas(base_case_0 base_case_1 n):    # defines function gen_lucas    # which returns the nth number (nth_number) of any Lucas sequence with P = 1 and Q = -1    # given the two base cases (base_case_0 and base_case_1) which determine the particular Lucas sequence    # for base_case_0 = 0 and base_case_1 = 1 the function will return the nth Fibonacci number    if n == 0:        nth_number = base_case_0    # if number at 0th index of set is asked return the 0th base case    elif n == 1:        nth_number = base_case_1    # if number at 1st index of set is asked return the 1st base case    elif n >= 2:        nth_number = gen_lucas(base_case_0 base_case_1 n - 1) + gen_lucas(base_case_0 base_case_1 n - 2)    # if number at index 2 or greater is asked use recursion express nth_number implicitly in terms of the base cases    return nth_numberExamples:10th Fibonacci number = gen_lucas( 0 1 10 ) = 5510th Lucas number = gen_lucas( 2 1 10 ) = 123Despite what the function name gen_lucas implies I have not yet figured out how to make the function truly general i.e. where P and Q are changeable parameters. So gen_lucas cant return Jacobsthal numbers for example.,None,1

Thursday August 22nd 2013 2:40 pm -04:00,When I declare foo=2 foo points to address x1234 or any other arbitrary one. As the video describes it if I now assign foo=4 it points to a new arbitrary address (ex. x2341) instead of overwriting the value in the address x1234 and keeping the variable pointing to x1234...? If this is true if I put a loop assigning the same variable and increasing it by one sooner or later it would use up all memory available?If it is implemented as the video describes it would it be possible to retirve old values of the variable assuming you know where it is stored? (Ie would that be possible to do that in python by accessing the old address and reading it not just declaring a new variable to equal it? Or would it assign the two variables to the same address in that case..?), Unresolved,3
Thursday August 22nd 2013 4:31 pm -04:00,First Thank you for the quick reply and information it answers the second part of my question.Second:Running this code:>>> import gc>>> gc.disable()>>> x=0>>> while True:    x+=1The memory never seems to increase so to me it seems that it is not defining a new memory address for each assignment of the variable and is just reusing it. (Unless for some reason garbage collection is still collecting it.. or it just has a low level gc that notices it..?), Unresolved,0

Monday September 2nd 2013 7:23 am -04:00,I think that with integer division the remainder is required to be 0 or positive. So for division by 24 we should have 0 <= remainder <24. So when you divide -1 // 24 = -1 and  -1 % 24 = 23. I think this is so that the remainder is uniquely defined if you allowed negative remainders you could have 12 // 24 = 0 with 12 % 24 = 12 or 12 // 24 = 1 with 12 % 24 = -12. I hope that makes sense.The precondition in to_24_hour_clock does appear to be unnecessary but Jonathan explained the thinking. It appears you will still get the correct answer (and therefore the credit) if you call  to_24_hour_clock with a negative number. Or (and I hope I can say this within the honor code) just add a multiple of 24 to the argument when calling to_24_hour_clock to make sure it is positive. The answer returned is unaffected., Unresolved,0
Tuesday September 3rd 2013 7:39 am -04:00,Thanks Karen. Id forgotten about dividing by a negative., Unresolved,0
Tuesday September 3rd 2013 8:20 am -04:00,Interestingly (perhaps?!) in C according to a book I just looked at the remainder is only guaranteed to be positive for both a and b positive in the formula Karen gives. For negative a and/or b the sign of the remainder is machine dependent but Karens formula must hold. Presumably that means whoever wrote the compiler for that machine decided. Sounds like trouble for running code on different machines. I begin to see why the precondition was used. , Unresolved,0

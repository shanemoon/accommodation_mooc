Thursday September 12th 2013 4:09 pm -04:00,For those of you who are familiar with the Turing addition machine. I think I wrote a something that represents this Turing addition. First it transcribes the ints into strings of the kind 1111 then it does an addition with these strings and transcribes them back to normal ints. So if anybody is interested and/or would like to improve it here it is:def num_to_prison(num):     (int) -> str    Returnin the prisoners representation of a given number.    >>>num_to_prison(8)    11111111    >>>num_to_prison(3)    111        x = 1    return num * xdef prison_to_num(num):     (str) -> num    Return the number given a prisoners representational input.    >>>prison_to_num(11111)    5    >>>prison_to_num(11)    2        return len(num)def Turing_adding(num1 num2):     (int int) -> int    Return the answer of the sum of num1 and num2.    >>> Turing_adding(23)    5    >>> Turing_adding(69)    15        a = num_to_prison(num1)    b = num_to_prison(num2)    c = a + 0 + b    x = len(c)    d =         for char in c[:(x-1)]:        if char in 1:            d = d + 1        if char in 0:            d = d + 1    for char in c[(x-1):]:        if char in 1:            d = d                            e = prison_to_num(d)    return e,None,0
Friday September 13th 2013 5:54 am -04:00,Hee TomThis could of course be the case however if you do that then you are just counting all the 1s. What a Turing adding machine does is read a piece of paper and only being able to read write or move the piece of paper. Therefore you have to change the 0 in the middle and not count the last 1 to get to the same answer. For example 110111 would have to give 11111  or something alike.,None,0
Friday September 13th 2013 6:17 am -04:00,Maybe this makes more sense (when executed that is):def Turing_adding(num1 num2):     (int int) -> int    Return the answer of the sum of num1 and num2.    >>> Turing_adding(23)    5    >>> Turing_adding(69)    15        a = num_to_prison(num1)    b = num_to_prison(num2)    c = a + 0 + b    x = len(c)    d =     print(Original string is  + c)        for char in c[:(x-1)]:        if char in 1:            d = d + 1        if char in 0:            d = d + 1    for char in c[(x-1):]:        if char in 1:            d = d    print(New string is  + d)                            e = prison_to_num(d)    print(The answer is  + str(e)),None,0
Saturday September 14th 2013 6:22 am -04:00,Hee TomIm really sorry if I offended you I really didnt mean to! And Im sure you know Python better than I do I never meant to imply that you dont.I guess I just didnt get your comment (and I still dont get it I think..). It still seems to me that by your code you merely count the 1s in the string which isnt what a Turing machine does right? But maybe youd care to talk me through it if you please?Once again sorry if I offended you I really didnt mean. I rushed my previous reply a little and Im sorry for that. ,None,1
Saturday September 14th 2013 12:04 pm -04:00,Yes lets! Could you please talk me through your first recommendation please cause I still dont really get how that does what a Turing machine does. It looks to me as if when rewriting it that way that you just count all the 1s in 110111 instead of first rewriting it to 111110 but I guess Im reading it wrongly or I just dont get it. Please enlighten me!,None,0
Saturday September 14th 2013 12:38 pm -04:00,I think I see your point! What I think I desperately tried to do was modify tape c from one thing to another as I imagined one single piece of tape going into the Turing machine and the same piece of tape coming out the other end but then modified so to deliver the answer. So that is what I tried to do trying to create the 111110 string of tape. And correct me if Im wrong that (unnecessary) inbetween step your codes doesnt make right? Or am I reading it wrong again? (I have a feeling I dont really make much sense... :p)I do have another slightly related question. Do you maybe have any good tips or examples of other problems I could work on my skills with? Or anything you found interesting or cool to do?  ,None,0
Saturday September 14th 2013 4:44 pm -04:00,Great! Thanks man! Im glad we worked it all out and thanks very much for the advice and tips!!,None,0
Tuesday September 24th 2013 2:55 pm -04:00,I have a problem with counting the letters in a string. What I now have when counting the letter in the string my name is:211121Counting both the ms twice. However what I want is:21111This is what I have:for char in tested_str2:        if char in abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:           x = tested_str2.count(char)           percentage = percentage + str(x)(Dont mind the weird names)Any ideas? Thank!!,None,0
Tuesday September 24th 2013 5:56 pm -04:00,Thanks! What it did is sort of that. I created a phantom values like this:percentage =     seen =     temp = 0        for char in tested_str2:        if char in seen:            temp = temp + 1        elif char in abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:                          x = tested_str2.count(char)               percentage = percentage + str(x)                seen = seen + charSo that all the letters that it counts go into the seen group and if the programme finds something in seen it doesnt count it again. Maybe its making stuff harder than necessary but he it works :PThanks though!!,None,0

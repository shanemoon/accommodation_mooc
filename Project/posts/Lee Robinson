Sunday September 1st 2013 4:54 am -04:00,HiI have a question regarding the storage of local variables for cases where a function is called multiple times in an expression. For example consider the function definition and expressions below (example taken from the course textbook). After the first part of the expression calls the function the result is stored in a frame not in the shell - the result is 4 (x = 1 f(x + 1) = f(2) = 4). The second part of the expression (f(x+2)) also creates a frame that results in 6 ((x = 1 f(x + 2) = f(3) = 6).In evaluating variables python reads from the most recent frame which is the shell frame (where x = 1). Because the most recent frame is the shell frame then the frame from the first part of the expression (where x evaluated as 4) must have been erased. So how does Python know that the result of the first part equals 4 and therefore to add 4 to the second part of the expression?  def f(x):    x = 2 * x    return xx = 1x = f(x + 1) + f(x + 2), Unresolved,0
Sunday September 1st 2013 8:35 am -04:00,HiThanks for the replies. I know about local variables differing from global variables. In fact thats my question. The local variables are stored in their own frame (not the main shell). After the first part of the expression (f(x+1)) evaluates the local variable x is evaluated as 4(see visualiser)However when the second part of the expression (f(x + 2)) is evaluated it uses the value of x = 1 - the global variable x. (see next step in visualiser) My question is: where does the result of the first expression get stored? i.e. the id4 result. The textbook from this course said that python always attaches the most recent value that a variable has been assigned in the frame (whether this is the shell frame or the blue frame underneath it). For python to read x as 1 then the result of x being 4 must have been erased so that the main shell assignment of x = 1 is the one that is used. Where does it go?  , Unresolved,0
Thursday September 26th 2013 6:09 am -04:00,HiI am having three problems with the readboards:First onestudent: test_a3.Test_02_ReadBoard.test_02_square_symmetric_boardMethod Description:NoneMessage:FAILURE: AssertionErrorFalse is not true : Note that the last line of the input file for a board does not have a newline character.Second one:student: test_a3.Test_02_ReadBoard.test_03_rectangular_assymetric_boardMethod Description:NoneMessage:FAILURE: AssertionErrorFalse is not true : Non-square board not loaded correctly.Third one:student: test_a3.Test_02_ReadBoard.test_03_square_assymetric_boardMethod Description:NoneMessage:FAILURE: AssertionErrorFalse is not true : Board not loaded correctly. Did you get rows and columns mixed up?I have checked my code and it seems to be ok. With the supplied board it is printing:read_board(board_file)[[E F J A J C O W S S] [S D G K S R F D F F] [A S R J D U S K L K] [H E A N D N D J W A] [A N S D N C N E O P] [P M S N F H H E J E] [J E P Q L Y N X D]]I have stripped out the newlines. Here is my code:def read_board(board_file):     (file open for reading) -> list of list of str    Return a board read from open file board_file. The board file will contain    one row of the board per line. Newlines are not included in the board.        boardlist =     row =     line = board_file.readline()    for letter in range(len(line[:line.find()])):        row.append(line[letter])    boardlist.append(row)    for line in board_file:        row =         for letter in range(len(line[:line.find()])):           row.append(line[letter])         boardlist.append(row)    return boardlistHas anyone else encountered this / know what the problem is?Thanks for your help, Unresolved,1

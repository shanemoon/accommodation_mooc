Monday September 9th 2013 7:37 pm -04:00,I understand the definition and what recursion does but I cant quite understand how (or WHY!) it works.In a book Im currently reading as an example of how recursion works a simple Fibonacci program is provided. def fib(n):    if n == 0:        return 0    elif n == 1:        return 1    else:        return fib(n-1) + fib(n-2)I cant understand why this works though. If n is not 0 or 1 then fib is just called again with a different value for n. HOW does this computes any kind of value? Another problem I dont quite understand is this one...The greatest common divisor (GCD) of a and b is the largest number that dividesboth of them with no remainder. One way to ﬁnd the GCD of two numbers is Euclid’s algorithm which is based on the observation that if r is the remainder when a is divided by b then gcd(a b) = gcd(b r). As a base case we canuse gcd(a 0) = a.Write a function called gcd that takes parameters a and b and returns their greatest common divisor.I was able to solve the problem with:def gcd(ab):    if b == 0:        return a    elif a % b == 0:        return b    remainder = a % b    return gcd(b remainder)This seems to work fine but I dont understand why. Even though I wrote this program on my own Im not quite sure why/how it works.Can someone please shine some light on this for me?,None,0

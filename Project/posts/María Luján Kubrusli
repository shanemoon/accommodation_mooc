Friday September 6th 2013 10:30 am -04:00,I found this answer from the Practical Programming: an introduction to computer science using Python book. I hope it helps...When Python evaluates an expression containing boolean operators it always does so from left to right. As soon as it knows enough to stop evaluating it stops even if some operands haven’t been looked at yet. The result is the last thing that was evaluated which is not necessarily either True or False. ( Python treats 0 and 0.0 as False and treats all other numbers asTrue)This is much easier to demonstrate than explain. Here are three expressions involving and:>>> 0 and 30>>> 3 and 00>>> 3 and 55In the first expression Python sees a 0 which is equivalent to Falseand immediately stops evaluating. It doesn’t need to look at the 3 to know that the expression as a whole is going to be false since and is true only if both operands are true.In the second expression though Python has to check both operandssince knowing that the first one (the 3) isn’t false is not enough to know what the value of the whole expression will be.Python also checks both operands in the third expression; as you can see it takes the value of the last thing it checked as the value of the expression as a whole (in this case 5)., Resolved,2

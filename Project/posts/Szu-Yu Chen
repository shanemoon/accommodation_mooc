Tuesday September 10th 2013 3:43 pm -04:00,I might know the reason for setting this kind of rule. However the rule also limits our coding flexibility and the exploration on library method. Is it really a good idea?For example:After finish get_complement() the trivial way to implement get_complementary_sequence() is using list comprehension which is a more pythonic way.=> .join([ ... for ...])Two concept behind this.1. list comprehension itself2. performance for large string join is better than concate, Unresolved,0
Tuesday September 10th 2013 11:22 pm -04:00,Agree with you.I learned the basic programming in c/c++ before and recently write some program in python. One thing I noticed is that I usually write the python code like c... and its not good.Every programming language provide us different way of thinking. They use different way to approach the problem and have different tool for the solution. I know the course is for basic programming. But we choose the python language. It is better to not only learn the programming but also learn the python it self. That means knowing the spirit and the culture behind python and write the code in python way. For example I really like the part talking about docstring. Without it functions still works. However docstring is one of the core value of python. If we want to learn python we should know it.Back to my original question I just found that doing the string concat by loop is not so pythonic [1]. Maybe in the future after we have learned the related topic the course could talk about some pythonic rules.[1] http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#building-strings-from-substringsBtw in this case the better way is generator not the list comprehension I mentioned in the very beginning.Learned something!!, Unresolved,1

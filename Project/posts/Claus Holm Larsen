Monday September 16th 2013 6:08 am -04:00,Text editors to write your Python code.It seems that quite a lot of Python programmers here have sometrouble shifting between the windows in Python. Ill admit that thisis one of the very annoying parts of programming using IDLE.There are however solutions to solve this. You can use MicrosoftVisual Studio Shell 2010 as an editor. Download is free of charge andtheres no further fees to pay. You only have to registre as a user.You can read more on the subject on the Python Programming Societypage on Facebook where youll find the python_editors.pdf under thefile menu.Heres the link:https://www.facebook.com/groups/pythonears/, Resolved,0
Friday September 27th 2013 1:40 am -04:00,Hi all.Remember to join Python Programmers Society on Facebook. Just follow the link: https://www.facebook.com/groups/pythonears/,None,0
Friday August 30th 2013 2:16 am -04:00,Hej Eskil.Jeg er ved at samle en dansk studiegruppe. Kunne du tænke dig at være med?Claus.,None,0
Friday August 30th 2013 2:15 am -04:00,Hej Nikolaj.Jeg er lige begyndt at samle en dansk studiegruppe. Kunne du tænke dig at være med?Claus,None,0
Thursday August 29th 2013 8:01 am -04:00,Hej alle.Der er vist en stor del af skandinavere her så der er god mulighed for at lave en studiegruppe. Af kortet kan jeg se at der er 4 fra DK + undertegnede. Har først lige tilmeldt mig i dag så jeg er vist bare lige lidt bagud fra begyndelsen af.Har tidligere deltaget i et Python kursus og det bliver gentaget her i løbet af efteråret - An introduction to interactive Python.,None,0
Friday September 27th 2013 1:38 am -04:00,Hi all.Remember to join Python Programmers Society on Facebook. Just follow the link: https://www.facebook.com/groups/pythonears/,None,0
Friday August 30th 2013 2:13 am -04:00,Im searching for members to join a Danish study group. Pleasecontact me either via mail chl@1-holmes.dkor Skype: claus.holm.larsen .I have previously experience with on-line study groups from otheron-line courses.,None,0
Wednesday September 11th 2013 12:43 pm -04:00,Hi all.Heres a short guide on how to tackle imports of differentmodules.Basic practice:To get access  to definitions in the math module youll import themodule:>>> import mathYou have now imported the module math but not any of the functionsin the module.To view the functions in the module you use the dir(module):>>> dir(math)[__doc____loader__ __name__ __package__ acos acosh asinasinh atan atan2 atanh ceil copysign cos coshdegrees e erf erfc exp expm1 fabs factorialfloor fmod frexp fsum gamma hypot isfiniteisinf isnan ldexp lgamma log log10 log1p log2modf pi pow radians sin sinh sqrt tan tanhtrunc]The functions represented in the math module is listed in squarebrackets.If we want to use the squareroot we have to call the sqrtfunction like this:>>> math.sqrt(16)4You can not use the sqrt(x) directly like this:>>> sqrt(25)Traceback(most recent call last):  File<stdin> line 1 in <module>NameError:name sqrt is not defined.Advanced import.If you are lazyyou can choose to import all functions.>>> frommath import *Now all functionsare loaded into your module and you can call these directly likethis:>>>sqrt(25)5.0Access to helpwhen all functions are imported like this:>>>help(sqrt)Helpon built-in function sqrt in module math:sqrt(...)    sqrt(x)        Returnthe square root of x.Specific importof different functions.If you only needsome few function to run your code you can specifically import theseto your module like this:>>> frommath import sqrt ceilTo get access tothese functions:>>>sqrt(64)8>>>ceil(34.6)35Note that whenyou import more than one function you have to separate the functionswith a comma.Hope thisclarified some of the problems by importing functions from modules., Resolved,0
Sunday September 15th 2013 2:56 pm -04:00,Hi Jashinta.As stated above the concept is the same.You can approach this by thinking of sqrt(x) as a method (fitswith the Python programming concept as you will see later). Thesin(x) sinh(x) and tan(x) are also methods you can apply to mathi.e. calling the different functions in the math module and thenapply the methods listed within the module to math like this:math.sqrt(x) math.pi math.sin(x) math.sinh(x) and math.tan(x).And by the way - join https://www.facebook.com/groups/pythonears/, Resolved,0
Monday September 16th 2013 5:27 am -04:00,Hi Shubham.Answering your question will result in a longer thesis about howto build a programming language. Allan C. have answered a part of thequestion – its about memory usage.The reason why you can use find() count() and other standardcalls can be found in the way the Python language is constructed.However we havent yet covered the area in this course but it willcome in due time.The backbone in Python is the programmes ability to handle liststuples and dictionaries. Heres a few examples of these:lst_a = [1 2 3 4 5]lst_b = [a hello dog hot dog]tp_a = (1 2 3 4 5 [3 4 5])Dic_a = {World : 1 Universe : 1 dice : 6}List tuples and dictionaries are handled in different ways. Forexample dictionaries can only hold one unique information that isduplicates are not allowed. List can hold any information integersand strings and duplicates are allowed. The properties for list tuples and dictionaries are veryimportant. List are mutable and can be changed after they arecreated where as tuples are immutable and are not changeable whencreated.In order to handle list tuples and dictionaries you must havesome tools. These are standard calls as find() count() and len()among others.An example:In one of our lessons we assign the variable a thevalue “word”.a = “word”The length of the string is 4 found by len(a).We can manipulate a by attach the letter s.a = str(a) +str(s)Herewe have concatenated “word” with “s” and assigned a the newvalue “words”.Soprint (a) prints words.Toerase s from the string is more problematic but can be done. We canmake an empty list lst_words = . If we iterate through the string awe can append the letters to the lst_words. >>>a = words>>>lst_words = >>>forn ina:...    lst_words.append(n)...>>>lst_words[wo r d s]Ourstring a is now divided into letters in a list. We then use the pop()method to remove the last entry in our lst_words. It would look likethis when you try it out:>>> lst_words= [w o r d s]>>>lst_words.pop(-1)>>>lst_words[wo r d]Therest is easy. You can either iterate through the lst_words andconcaternate the results or write this in the promt:>>>print (str(lst_words[0] + lst_words[1] + lst_words[2] +lst_words[3]))wordYoucan also assign the variable a to the new value.a= str(lst_words[0] + lst_words[1] + lst_words[2] + lst_words[3]>>>print (a)wordSomefinal remarks.Sincethe “hard core” of Python is based on list tuples anddictionaries you must have some basic tools to handle these plus thestandard arithmetic operators to make a powerful programminglanguage.As a final note: You dont have to import sqrt from mathto calculate the square root of a given number hence x ** 0.5 givesthe same result. Written as this will explain some simplemathematical stuff:2 **  2 = 44** (½) = 23** 3 = 2727** (1/3) = 3 and so forth.A simple general mathematical formula can be derived as:For a given x and n where x >= and n > 0 the n th root of x is:f(x n) = x ** (1/n)Happy programming and dont forgetto join https://www.facebook.com/groups/pythonears/, Resolved,1
Friday September 13th 2013 2:55 am -04:00,Python Programming Society connects people who love to program inPython and wants to spread the word about the fastest growingprogramming language in the world.As of autumn 2013 the Python language is the 4 th most usedprogramming language in the world and expanding. The growth is now1.8 % and the language is more popular than ever.Python is used by NASA and CERN in scientific research. CERN has established a yearly conference on Python and scientific programming. On aworldwide base Python is dazzling students and teachers who use theprogram in their daily work. If you love toprogram in Python and want to expand your knowledge then join thisgroup and share your wisdom among friends.Follow this link:https://www.facebook.com/groups/pythonears/,None,1
Monday September 16th 2013 6:07 am -04:00,Text editors to write your Python code.It seems that quite a lot of Python programmers here have sometrouble shifting between the windows in Python. Ill admit that thisis one of the very annoying parts of programming using IDLE.There are however solutions to solve this. You can use MicrosoftVisual Studio Shell 2010 as an editor. Download is free of charge andtheres no further fees to pay. You only have to registre as a user.You can read more on the subject on the Python Programming Societypage on Facebook where youll find the python_editors.pdf under thefile menu.Heres the link:https://www.facebook.com/groups/pythonears/, Unresolved,0
Monday September 16th 2013 3:51 pm -04:00,Did check it. Looks god - butttttttt I still need the line colapse tool :), Unresolved,0
Monday September 16th 2013 5:24 pm -04:00,Hi Tom.Just tried Wing and didnt find that feature :(Also tried PyScriptor with the same result. Visual Studio 2010 has this feature and its easy to change between the Python 2.7 and 3.7 interpreter., Unresolved,0
Tuesday September 17th 2013 4:02 am -04:00,Did indeed check it out. Downloaded it installed it and run it –but still need the nice feature of collapsible lines.Dont forget to wisit the Python Programmers Society on Facebook: https://www.facebook.com/groups/pythonears/, Unresolved,0
Monday September 16th 2013 5:35 pm -04:00,# Guess the number: Python ver 3.7#########################################################################Read these notes carefully:Guess the Number is a little game where the computer picks a number in theinterval [0: 100). You have to guess the number and you only have a limitednumber of guesses.The game also offers you to guess a number between 0 and 1000 interval [0: 1000).The computer response to your guess with a hint: To low/To high.The max number of guesses can be determined by deduction like this -  [0: 100):First guess = 50. If the computer response To low youll have to choose anew number. Since the secret number is in the interval [50: 100) the nextlogical number must be 75. If the computer response To high your next logicalchoice is a number in the interval (50: 75). Here you have 24 numbers and thecentre number is 62 ( 24 / 2 ). If computer response To low your next naturalnumber will be 68. Using this strategy youll find the secret number in your 7thguess. For the interval [0: 1000) the number of guesses is 10.Note that the code also validates the input thereby omitting error messages.########################################################################### First we import randomimport random# Next we define our global variables.About global variables.Global variables are defined after you have imported modules but before youdefine your functions and classes. To make a change to a global variableyou must load it into the function where you want to change the value of the variable.count1 = 0      # Counts the players remaining guesses.secret_num = 0  # Sets the value of the secret number to 0.num100 = False  # If True the game range [0: 100) is played.num1000 = False     # If True the game range [0: 1000) is played.# Defining error handler.def error():    print (Input error.........)    print (You must input a number.)    print()# Construct the game selector where you choose which part of the game you# want to play. This function also works as a initialising function to start the game.def game_change():     Start game and lets player choose between the numbers    0 to 100 or 0 to 1.000.     print (Guess the number - select between range 100 = 1 or range 1000 = 2)    range_select = input (Input your choise = )            if range_select.isalpha() == True or range_select == :      # Test that input is a number.        error()        game_change()    else:        range_select = int(range_select) # Converts range_select to an integer    if range_select == 1:        # Range 0 - 100 select.        range100()      # Call to range100 settings for the game.    elif range_select == 2:         # Range 0 - 1000 select        range1000()     # Call to range1000 settings for the game    elif range_select < 1 or range_select > 2:        print (You can only use the numbers 1 or 2.)        print()        game_change()# Defines settings for range 0 - 100 and changes global variables.def range100():    global count1 secret_num num100 num1000  # Loading our global variables that are about to be changed.    count1 = 7  # Resetting count1 - number of allowed guesses in case of the previous game was a 0 - 1000.        secret_num = random.randrange(0 100) # Calculates the secret number    num100 = True    num1000 = False    print (Range 100 selected)    # Prints the selected game to the console.    print()        input_Txt()    # Calls the evaluation function    # Defines settings for range 0 - 1000 and changes global variables.def range1000():    global count1 secret_num num100 num1000  # Loading our global variables that are about to be changed.            count1 = 10     # Resetting count1 - number of allowed guesses in case of the previous game was a 0 - 100.        secret_num = random.randrange(0 1000)  # Calculates the secret number    num100 = False    num1000 = True    print (Range 1000 selected)     print()        input_Txt()     # Calls the evaluation functiondef input_Txt():    # main game logic goes here.        global count1    guess = input (Make your choise )     # Input your guess    if guess.isalpha() == True or guess == :     # Test if input is a number.        error()        input_Txt()    else:        guess = int(guess)  # Converts the variable guess to an integer.    # Check if input is within the choosen range of the game.    if num100 == True and (guess < 0 or guess > 99):        print (Input error. Number must be in the interval [0 - 100).)        print()        input_Txt()    elif num1000 == True and (guess < 0 or guess > 999):        print (Input error. Number must be in the interval [0 - 1000).)        print()        input_Txt()        count1 -= 1     # Reduce number of guesses by 1.    # Evaluates the guess against the secret number and number of allowed guesses.        if guess > secret_num  and count1 > 0:        print (To hiegh.)        print (You have  + str(count1) +  guesses left.)        print()                input_Txt()    elif guess < secret_num  and count1 > 0:        print (To low.)        print (You have  + str(count1) +  guesses left.)        print()                input_Txt()    elif guess == secret_num and count1 >= 0:        print()        print (You have  + str(count1) +  guesses left.)        print (You a winner - Congrats)        print()                print (New game starts - make your choise.)                game_change()       # Starts a new game.    else:                   # The statement when somputer winns the game.        print()        print (Hi hi hi - I the Great Pythonian winns the game)        print (with the number  + str(secret_num) + .)        print (You loose.)        print (Try to defeat me ....... Start a new game.)                print()         game_change()       # Starts a new game.game_change()       # Initialise the game.# Dont forget to visit the Python Programming Society page on Facebook: https://www.facebook.com/groups/pythonears/,None,1
Tuesday September 17th 2013 3:52 am -04:00,Hi Alain.Nice youve pointed out the repetitive code and I know that thecode can be improved. But as we now begin week 5 and a lot of peoplein here just are getting acquainted with Python it seemedto me a god idea to publish a code that where easy read and easy tounderstand thus Guess the Number.With a few exceptions the code contains familiar expressionswhich has been presented to all the students of this class. In thatperspective most of the class students should be able to read andunderstand the code without an in-depth reading of special parts ofthe code. After all they do want to learn to program in Python.I strongly agree with you that the code can be improvedespecially on testing valid inputs. So far the code only test whetherthe input is a number or a string and the correct range for the gamein progress. The code does not check for input like “#¤%&/()=and those inputs generates an error and stops the program. But the code shows how to approach input validation and thats an important lesson. Hope that you agree in that.Some general thoughts about the learning process in programming.As I see it the shortest way to learn to program is to read easycode examples and certainly also to be able to make your ownsolutions to a specified problem. Guess the Number can easily beprogrammed without an in-depth knowledge of coding principles.However the more tedious part of programming is to find all theexceptions thats not wanted. In other words error handling. In Guessthe Number error handling is about testing valid input and this parthas not yet been covered in our lectures and I dont think that itwill be. In this example we could program a module that handles theerrors and then call it to validate the input. That in it self isworth an exercise.Code redundancy or repetitive code is a special area. To get aninsight in this youll have to work a lot with redundant codeexamples learn and discuss problems with other programmers and alsohave some insights in mathematics aside from all the other wonderfulcode tricks Python offers.Happy Python programming.,None,1
Tuesday September 17th 2013 8:21 am -04:00,Hi Alain.Ha ha – likes the Zen code of Python and you are right quotingit. It corresponds beautifully with the terms used for composingmusic: With the simple possible means to express the maximal effect. Even the great composers knew that and some of the most popularpieces of music obey the term. Even Beatles early tunes applied tothat rule although I dont think that they in fact was aware of itsexistence.Although we are taught not to create repetitive code its mostlikely that newcomers to programming quite often will createprogrammes with redundant code. Code redundancy has its offspring inthe way you approach the solution i.e. have you considered witchmodules classes functions and helper functions that are needed inorder to make the code work. In other words – have the programmerconsidered the tools that can be used to solve the problem?In the code you present you use the mat.ceil() and math.log()method. But if you hadnt thought of using the math module with themethods ceil() and log() your approach to the solution would havebeen different.All in all its about how you use the tools in your toolbox. Youmay have seen the tools but doesn’t connect these to the solutionor as a part of it. You may not have considered how to slice yourcode up into tiny parts that eventually will lead to a non redundantcode because youre not used to think in these terms. So the stonyway to make non redundant code solutions is filled with redundantcode fragments. If youre not god at handling the logical operatorsand can look “through” these and see them as a part of asolution youre bound with if/elif/else solutions. Never the less: Redundant code or not - youll have a program that produces a solution.So with the above in consideration I still hold to the expressionthat reducing redundant or repetitive code is a special area. Anarea in which especially newcomers in programming should use sometime to study in order to reduce redundancy in their code.,None,0
Wednesday September 18th 2013 3:36 am -04:00,Hi Tom.Nice code and it clearly demonstrates the uses of classdefinitions.It is however beyond the level that we at the momentare taught but can definitely give newcomers to Python an idea ofhow to develop their code.Nice to see these examples and arelooking forward to see more of these. ,None,0
Wednesday September 18th 2013 9:08 am -04:00,Hi Barry.Dont think that this course covers classes at all. It is afterall a basic introduction to Python programming.If you want toknow more about classes the Introduction to Interactive Pythoncourse gives a very concise introduction to classes. ,None,0
Wednesday September 18th 2013 4:27 pm -04:00,Hi Tom.Thanks for the link to codeacademy. Was struggling abit with classes in the Interactive Python Programming bur in theend got an idea of how they worked. Did after all finalize the courseand graded. :)And by the way codeacademy is a great place to start for newcomers in Python.,None,0
Thursday September 19th 2013 7:29 am -04:00,Hi Alain:Why dont you join Python Programmers Society on Facebook. Our members certainly could use all information you have about ongoing courses.,None,0
Thursday September 19th 2013 5:17 pm -04:00,Hi Barry.Course An Introduction to Interactive Python starts in a fewweeks. Its fun – but however a tiny bit demanding. The first 3weeks at a fairly pace where everybody can follow the material. Week4 tempo speeds up a little and speed is held at a fair accelerationtowards week 7 and 8 where you will do your last assignment.Courseis fully supported from staff and professors who gladly join inanswering questions. Video lectures are in top quality even with adownloadable text of each session. Examples are overwhelming as ispractice exercises. Course even comes with a weekly session Tips &Tricks about handling errors and other god stuff to help you throughthe course. And you have peer to peer evaluation on all your assignments - thats absolutely great because you get to see their code as well.,None,0
Friday September 20th 2013 11:08 am -04:00,For even numbers your sum(range(startstopincr)) works fine. Butwhat happens when you want to find all the odd numbers?Example. sum(range(7 33 3)) – First number is 7 but then itfails with the second number when it increments 3 – second numberin this selection is 10., Unresolved,0
Friday September 20th 2013 8:53 am -04:00,Hi Bobby.Dont quit but get back on the horses back again Its not thatdifficult so heres a few steps to follow.Step 1.We want to create a function that writes a name. To create thefunction we have to define it and give it a name.def write_name():     print (“My name”)We can run this funtion write_name() over and over again and allit does is to write “My name” in the promt.Step 2.We now change the function to write any name given to it byletting the function taking an parameter named name.def write_name(name):    print (name)When you call the function it requires a parameter that is anyname or word or number.write_name(Peter) prints Peter to the console.write_name(123456) prints 123456 to the console.Step 3.The parameter name can be used as an argument in other functions.So if I want the length of “name” I can use the built in functionlen(name) and it returns a value. So lets have a closer look atthis.>>> len(“Hello”) returns 5>>> len(“Hel lo”) returns 6 but there is only 5letters. That tells you that the len(what ever stuffed in here”)returns a value representing the length of the entire stringsincluded spaces.In our assignment we are not to take spaces between words orletters into consideration.So back to our function. We now define a new function calledlength_word(word) like this:def length_word(word):    	print (len(word))We can now call the length_word function from the promt any timewe want to use it. For example length_word(cannope) prints thenumber 7.Step 4.One of the reasons why we define functions is that they can dosome work for us and functions are used in programmes tosolve distinct tasks. But its not really a help if all our functionsprints the result because a printed result is in fact erased fromthe computers memory. To solve this problem we can use the returnstatement.The return statement returns the value and the value is passed oneither to an other variable or as it is in our case to the promt.So a solution to the assignment 2 first step is now ratherobvious. We have to return the value of the result given bylen(word). Our code now looks like this:def length_word(word):    	return (len(word))Calling length_word from the promt and gives a parameter nowreturns a value in this case an integer.Happy programming, Unresolved,3
Friday September 20th 2013 9:27 am -04:00,Hi.get_complement returns only the complement nucleotide. That is if thenucleotide is A it returns T. get_complementary_sequence returns theentire complementary sequence of a DNA. That is if our DNA looks likethis → ACGT the complementary sequence is TGCA.You can look at these 2 functions this way: get_complementary_sequence is the main function. To use it we have tomake a helper function get_complement that iterates through the DNAstring to find the complementary nucleotides. The complementary nucleotides is passed to get_complementary_sequence and assembled here and returned as a DNA string.Hope that answered your question., Unresolved,4
Saturday September 21st 2013 1:25 pm -04:00,Hi James.Its all about numbers so here a little guide :)Step 1.If I want to find all the even numbers in an arbitrary string ofnumbers beginning from x1 to x2 where x2 is not included Ill haveto think at the smallest even number I can find. Well hope you agreethat its 2. Now then the condition that a number is even no matterwhat number we decide to take is that when the number is dividedwith 2 there is no remainder.Translated to Python it tells you that:if x1 % 2 == 0  then the number is even. The % sign returns theremainder of the division.In Python you can iterate through a row of numbers by using therange(x1 x2). This function however exclude the number x2 andtherefore counts to the number x2 – 1.So if your x2 is an even number youll have to add 1 to get therange function to reach the “real” last number.As a pseudo code you could write:For number in range(x1 x2) return number % 2 if number % 2 = 0.In the question you are asked to calculate the sum of evennumbers. So we need a variable that only keeps the sum. This could bea pseudo code like: sum_numbers = sum_numbers + even_number.Do remember that the return statement stops the execution of theloop so youll have to place this in the end of your code., Unresolved,0
Saturday September 21st 2013 4:53 pm -04:00,James.Visualizer do have some limits.Using range(3 25 2) is not the right solution. Range (3 25 2) is a step method for iterating through a row of numbers. Your code must check if the number is even thats the whole idea. If you can check for an even number you certainly by only changing one number also can use the same code to check for odd numbers.So have a look again at my previous answer. Something to do with the % sign. Check out Python operators + -  / * != % < >. Se what they do and how they handle numbers., Unresolved,0
Monday September 23rd 2013 6:55 am -04:00,Heres a few tips & tricks to make your programming life moreeasy and fun.Importing modules.We have seen how to import modules like math. To do so we do likethis:import mathHowever this only imports the math module and not any of thefunctions inside the module. In this case youll have to call thefunctions separately each time you want to use them. For example touse the square root youll have to call it like this:math.sqrt(x)To use Pi you have to call math.pi.If you know which functions from the math module you want to useyou can specifically import these like this:from math import sqrt pi cos sinNow you can access these functions directly without the prefixmath followed by the choosen function like this:sqrt(16)sin(45)piHowever you can choose to load all functions from the math moduleat once like this:from math import *Importing this way gives you the advantage that you can access thefunctions directly like shown above: sqr(4) pi cos(25) etc.You can also import more than on module at a time like this:import math randomJust separate the modules you want to import by a comma.Variables – lifetime.You can create any variable you like. If a variable is created inthe root that is in the very beginning of a line the variableslifetime is as long as your code runs or until the variable isassigned an other value. Variables that are created in the root arealso referred to as global variables.Variables created inside a function only exist as long as thefunctions runs. This means that if you create a variable countinside a function you can not access its value after the functionhas executed.Example:def count():    for n in range(0 20):        count = n + 2    return count>>> count()21>>> count<functioncount at 0x00E02D20>Handling global variables.We define a global variable count and assign it the value 0. Tochange the value of a global variable inside a function youll haveto tell the function that you are using this variable. This is doneright after your function definition like this:count = 0def increment():    global count    for n in range(0 10):        count = count + 1Notice that we dont need a return statement after the loop.Try to run this code then type count in the console – theresult is:>>>count0Then execute the increment code and type count again:>>>increment()>>>count10>>>If you are using more than one global variable and need to make achange to these inside a function then separate the variables by acomma like this:global count velocity_1 velocity_2 accelerationIncrement – a short code.Incrementing variables is in fact a sport in every programminglanguage therefore there is an easier way to handle incrementation.Incrementing the variable number by 1 can be done like this:number = number + 1The shorter code is:number += 1And it saves some time. Try it out on –  * and /count1 = 0def increment():    global count1    for n in range(0 10):        count1 += 1Printing can be annoying.The print statement prints the result to the console and at timesthis can be a rather annoying experience. For example consider thiscode:def increment_1():    for n in range(0 100):        print (n)Yes it prints a 100 new lines of code each time it is executed.When you test your code print statements can inform you ofintermediate results in your code to keep you on the right trackwhen developing the code further.In Python 3.3 the print statement has a new feature where you canprint your results in one line.def increment_1():    for n in range(0 100):        print (n  end=)Notethat the  creates a space between the printed characters. Theend= tells the print statement to append the next print result onthe same line.Happy programming and dont forget to join Python ProgrammingSociety on Facebook: https://www.facebook.com/groups/pythonears/,None,3
Friday September 27th 2013 2:11 am -04:00,Hi all.Weve just started the Python Programming Society on Facebook.General idea is to create a wide network of Python enthusiasts fromaround the world. With this network well want to create individualsubgroups preferably sorted by country.One of our first tasks is to provide some useful help to newcomersto the Python programming language. This will be advise on editorstutorials ongoing courses and  if possible a short basicintroduction to the Python environment. Over a longer time periodwell like to create a basic tutorial in Python a tutorial thatscovering all the basic elements in the Python language. The targetaudience for this tutorial are schools colleges and othereducational institutions and the single purpose is to incorporate thePython programming language on an early state in students life toprovide them with a long lasting programming tool that they can usein further studies and education.I pursuing these tasks we need more enthusiastic members so jointhe Python Programming Society on Facebook and lets all strive toreach this small and humble goal by joining our workforce worldwide.https://www.facebook.com/groups/pythonears/,None,0
Friday September 27th 2013 4:15 am -04:00,Hi Bernardo.Ive already checked that page out and there are a group in DK. Unfortunately their contact page at Facebook is closed.,None,0
Friday September 27th 2013 5:47 am -04:00,Hi Bernardo.Thanks for the links.Have a nice week-end :),None,0

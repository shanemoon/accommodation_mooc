Saturday September 14th 2013 12:37 pm -04:00,So after watching the for loop over str lecture of week 4 that function didnt look optimal. I figured why not make the string lower case then I only have to check 5 letters instead of 10.I came up with two other implementations of the function and I turned to stackoverflow (http://stackoverflow.com/a/12877829) for two more.After some googling I discovered the module timeit for timing benchmarks and I wanted to see what really worked.Well as they had it actually appears to be the fastest way to implement that function (surprise!). But adding a few more letters to check for makes converting to lower case a faster way to do it.Ive included my code below after adding a few more letters for checking and the resulting benchmarked times.def c_vowels(s):    num = 0    for char in s:        if char in aeiouqwrtyAEIOUQWRTY:            num += 1    return numdef c_vowels_lower(s):    num = 0    for char in s:        if char.lower() in aeiouqwrty:            num += 1    return numdef c_vowels_lower_first(s):    num = 0    for char in s.lower():        if char in aeiouqwrty:            num += 1    return numdef iterVowelCount(s):    vowels = frozenset(aeiouqwrtyAEIOUQWRTY)    return sum(1 for c in s if c in vowels)def recVowelCount(s):    if not s:        return 0    return (1 if s[0] in aeiouqwrtyAEIOUQWRTY else 0) + recVowelCount(s[1:])if __name__ == __main__:    import timeit    print(timeit.repeat(c_vowels(The quick brown fox jumps over the lazy dog) setup=from __main__ import c_vowels))    print(timeit.repeat(c_vowels_lower(The quick brown fox jumps over the lazy dog) setup=from __main__ import c_vowels_lower))    print(timeit.repeat(c_vowels_lower_first(The quick brown fox jumps over the lazy dog) setup=from __main__ import c_vowels_lower_first))    print(timeit.repeat(iterVowelCount(The quick brown fox jumps over the lazy dog) setup=from __main__ import iterVowelCount))    print(timeit.repeat(recVowelCount(The quick brown fox jumps over the lazy dog) setup=from __main__ import recVowelCount))Sorry that the timeit statements look so ugly. And heres the resulting times in order from the first function to the last:[7.372323273790919 7.368947130254668 7.367730001819396][12.79471629104718 12.788821918575088 12.788242044813096][7.157701871177522 7.1546266275419015 7.1525081989391595][9.148450948651075 9.150421026605144 9.152393437116586][25.931958368516064 25.933291191796854 25.903617796479722]Youre seeing the result of each function being run 10000 times and then repeated 3 times total.,None,0
